***************
*** 96,107 ****
      // Start
      ClusterRequest cr = new ClusterRequest(cluster.getClusterId(), "c1", cluster.getDesiredStackVersion().getStackVersion(), null);
  
-     cr.setDesiredConfig(Collections.singletonList(new ConfigurationRequest("c1","capacity-scheduler","version2",new HashMap<String, String>(), null)));
      
      controller.updateClusters(Collections.singleton(cr) , null);
      
      
-     ServiceComponentHostRequest r = new ServiceComponentHostRequest("c1", null, null, null, null);
      r.setStaleConfig("true");
      Set<ServiceComponentHostResponse> resps = controller.getHostComponents(Collections.singleton(r));
      Assert.assertEquals(1, resps.size());
--- 96,107 ----
      // Start
      ClusterRequest cr = new ClusterRequest(cluster.getClusterId(), "c1", cluster.getDesiredStackVersion().getStackVersion(), null);
  
+     cr.setDesiredConfig(Collections.singletonList(new ConfigurationRequest(cluster.getClusterId(),"capacity-scheduler","version2",new HashMap<String, String>(), null)));
      
      controller.updateClusters(Collections.singleton(cr) , null);
      
      
+     ServiceComponentHostRequest r = new ServiceComponentHostRequest(cluster.getClusterId(), null, null, null, null);
      r.setStaleConfig("true");
      Set<ServiceComponentHostResponse> resps = controller.getHostComponents(Collections.singleton(r));
      Assert.assertEquals(1, resps.size());
***************
*** 117,128 ****
      // Start
      ClusterRequest cr = new ClusterRequest(cluster.getClusterId(), "c1", cluster.getDesiredStackVersion().getStackVersion(), null);
      
-     cr.setDesiredConfig(Collections.singletonList(new ConfigurationRequest("c1","core-site","version2",new HashMap<String, String>(),null)));
      
      controller.updateClusters(Collections.singleton(cr) , null);
      
      
-     ServiceComponentHostRequest r = new ServiceComponentHostRequest("c1", null, null, null, null);
      r.setStaleConfig("true");
      Set<ServiceComponentHostResponse> resps = controller.getHostComponents(Collections.singleton(r));
      Assert.assertEquals(4, resps.size());
--- 117,128 ----
      // Start
      ClusterRequest cr = new ClusterRequest(cluster.getClusterId(), "c1", cluster.getDesiredStackVersion().getStackVersion(), null);
      
+     cr.setDesiredConfig(Collections.singletonList(new ConfigurationRequest(cluster.getClusterId(),"core-site","version2",new HashMap<String, String>(),null)));
      
      controller.updateClusters(Collections.singleton(cr) , null);
      
      
+     ServiceComponentHostRequest r = new ServiceComponentHostRequest(cluster.getClusterId(), null, null, null, null);
      r.setStaleConfig("true");
      Set<ServiceComponentHostResponse> resps = controller.getHostComponents(Collections.singleton(r));
      Assert.assertEquals(4, resps.size());
***************
*** 160,166 ****
      addHost("c6401","c1");
      addHost("c6402","c1");
      
-     clusters.getCluster("c1");
      createService("c1", "YARN", null);
      
      createServiceComponent("c1","YARN","RESOURCEMANAGER", State.INIT);
--- 160,165 ----
      addHost("c6401","c1");
      addHost("c6402","c1");
      
      createService("c1", "YARN", null);
      
      createServiceComponent("c1","YARN","RESOURCEMANAGER", State.INIT);
***************
*** 205,214 ****
    private void createService(String clusterName,
        String serviceName, State desiredState) throws AmbariException, AuthorizationException {
      String dStateStr = null;
      if (desiredState != null) {
        dStateStr = desiredState.toString();
      }
-     ServiceRequest r1 = new ServiceRequest(clusterName, serviceName, dStateStr);
      Set<ServiceRequest> requests = new HashSet<>();
      requests.add(r1);
  
--- 205,215 ----
    private void createService(String clusterName,
        String serviceName, State desiredState) throws AmbariException, AuthorizationException {
      String dStateStr = null;
+     Cluster cluster = clusters.getCluster("c1");
      if (desiredState != null) {
        dStateStr = desiredState.toString();
      }
+     ServiceRequest r1 = new ServiceRequest(cluster.getClusterId(), serviceName, dStateStr);
      Set<ServiceRequest> requests = new HashSet<>();
      requests.add(r1);
  
