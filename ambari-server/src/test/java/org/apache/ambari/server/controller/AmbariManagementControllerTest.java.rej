***************
*** 365,376 ****
    }
  
    private void createService(String clusterName,
-       String serviceName, State desiredState) throws AmbariException, AuthorizationException {
      String dStateStr = null;
      if (desiredState != null) {
        dStateStr = desiredState.toString();
      }
-     ServiceRequest r1 = new ServiceRequest(clusterName, serviceName, dStateStr);
      Set<ServiceRequest> requests = new HashSet<>();
      requests.add(r1);
  
--- 365,376 ----
    }
  
    private void createService(String clusterName,
+                              String serviceName, State desiredState) throws AmbariException, AuthorizationException {
      String dStateStr = null;
      if (desiredState != null) {
        dStateStr = desiredState.toString();
      }
+     ServiceRequest r1 = new ServiceRequest(1L, serviceName, dStateStr);
      Set<ServiceRequest> requests = new HashSet<>();
      requests.add(r1);
  
***************
*** 432,439 ****
    }
  
    private Long createConfigGroup(Cluster cluster, String name, String tag,
-                               List<String> hosts, List<Config> configs)
-                               throws AmbariException {
  
      Map<Long, Host> hostMap = new HashMap<>();
      Map<String, Config> configMap = new HashMap<>();
--- 435,442 ----
    }
  
    private Long createConfigGroup(Cluster cluster, String name, String tag,
+                                  List<String> hosts, List<Config> configs)
+     throws AmbariException {
  
      Map<Long, Host> hostMap = new HashMap<>();
      Map<String, Config> configMap = new HashMap<>();
***************
*** 457,465 ****
    }
  
    private long stopService(String clusterName, String serviceName,
-       boolean runSmokeTests, boolean reconfigureClients) throws
-       AmbariException, AuthorizationException {
-     ServiceRequest r = new ServiceRequest(clusterName, serviceName, State.INSTALLED.toString());
      Set<ServiceRequest> requests = new HashSet<>();
      requests.add(r);
      Map<String, String> mapRequestProps = new HashMap<>();
--- 460,469 ----
    }
  
    private long stopService(String clusterName, String serviceName,
+                            boolean runSmokeTests, boolean reconfigureClients) throws
+     AmbariException, AuthorizationException {
+     Cluster c = clusters.getCluster(clusterName);
+     ServiceRequest r = new ServiceRequest(c.getClusterId(), serviceName, State.INSTALLED.toString());
      Set<ServiceRequest> requests = new HashSet<>();
      requests.add(r);
      Map<String, String> mapRequestProps = new HashMap<>();
***************
*** 525,543 ****
    private long startService(String clusterName, String serviceName,
                              boolean runSmokeTests, boolean reconfigureClients,
                              MaintenanceStateHelper maintenanceStateHelper) throws
-       AmbariException, AuthorizationException {
-     ServiceRequest r = new ServiceRequest(clusterName, serviceName,
-         State.STARTED.toString());
      Set<ServiceRequest> requests = new HashSet<>();
      requests.add(r);
      Map<String, String> mapRequestProps = new HashMap<>();
      mapRequestProps.put("context", "Called from a test");
      RequestStatusResponse resp = ServiceResourceProviderTest.updateServices(controller, requests,
-         mapRequestProps, runSmokeTests, reconfigureClients, maintenanceStateHelper);
  
      Assert.assertEquals(State.STARTED,
-         clusters.getCluster(clusterName).getService(serviceName)
-             .getDesiredState());
  
      if (resp != null) {
        // manually change live state to stopped as no running action manager
--- 529,548 ----
    private long startService(String clusterName, String serviceName,
                              boolean runSmokeTests, boolean reconfigureClients,
                              MaintenanceStateHelper maintenanceStateHelper) throws
+     AmbariException, AuthorizationException {
+     Cluster c = clusters.getCluster(clusterName);
+     ServiceRequest r = new ServiceRequest(c.getClusterId(), serviceName,
+       State.STARTED.toString());
      Set<ServiceRequest> requests = new HashSet<>();
      requests.add(r);
      Map<String, String> mapRequestProps = new HashMap<>();
      mapRequestProps.put("context", "Called from a test");
      RequestStatusResponse resp = ServiceResourceProviderTest.updateServices(controller, requests,
+       mapRequestProps, runSmokeTests, reconfigureClients, maintenanceStateHelper);
  
      Assert.assertEquals(State.STARTED,
+       clusters.getCluster(clusterName).getService(serviceName)
+         .getDesiredState());
  
      if (resp != null) {
        // manually change live state to stopped as no running action manager
***************
*** 579,588 ****
                                boolean runSmokeTests, boolean reconfigureClients,
                                MaintenanceStateHelper maintenanceStateHelper,
                                Map<String, String> mapRequestPropsInput)
-       throws AmbariException, AuthorizationException {
  
-     ServiceRequest r = new ServiceRequest(clusterName, serviceName,
-         State.INSTALLED.toString());
  
      Set<ServiceRequest> requests = new HashSet<>();
      requests.add(r);
--- 584,594 ----
                                boolean runSmokeTests, boolean reconfigureClients,
                                MaintenanceStateHelper maintenanceStateHelper,
                                Map<String, String> mapRequestPropsInput)
+     throws AmbariException, AuthorizationException {
  
+     Cluster c = clusters.getCluster(clusterName);
+     ServiceRequest r = new ServiceRequest(c.getClusterId(), serviceName,
+       State.INSTALLED.toString());
  
      Set<ServiceRequest> requests = new HashSet<>();
      requests.add(r);
***************
*** 701,707 ****
      r.setClusterName(getUniqueName());
      try {
        controller.createCluster(r);
-      fail("Expected create cluster for invalid request - no stack version");
      } catch (Exception e) {
        // Expected
      }
--- 707,713 ----
      r.setClusterName(getUniqueName());
      try {
        controller.createCluster(r);
+       fail("Expected create cluster for invalid request - no stack version");
      } catch (Exception e) {
        // Expected
      }
***************
*** 712,718 ****
        controller.createCluster(r);
        controller.updateClusters(Collections.singleton(r), null);
  
-      fail("Expected create cluster for invalid request - invalid provisioning state");
      } catch (Exception e) {
        // Expected
      }
--- 718,724 ----
        controller.createCluster(r);
        controller.updateClusters(Collections.singleton(r), null);
  
+       fail("Expected create cluster for invalid request - invalid provisioning state");
      } catch (Exception e) {
        // Expected
      }
***************
*** 724,748 ****
      createCluster(cluster1);
      String serviceName = "HDFS";
      clusters.getCluster(cluster1).setDesiredStackVersion(
-         new StackId("HDP-0.1"));
      createService(cluster1, serviceName, State.INIT);
- 
      Service s =
-         clusters.getCluster(cluster1).getService(serviceName);
      Assert.assertNotNull(s);
      Assert.assertEquals(serviceName, s.getName());
      Assert.assertEquals(cluster1, s.getCluster().getClusterName());
  
-     ServiceRequest req = new ServiceRequest(cluster1, serviceName, null);
  
      Set<ServiceResponse> r =
-         ServiceResourceProviderTest.getServices(controller, Collections.singleton(req));
      Assert.assertEquals(1, r.size());
      ServiceResponse resp = r.iterator().next();
      Assert.assertEquals(serviceName, resp.getServiceName());
      Assert.assertEquals(cluster1, resp.getClusterName());
      Assert.assertEquals(State.INIT.toString(),
-         resp.getDesiredState());
      Assert.assertEquals("HDP-0.1", resp.getDesiredStackVersion());
  
      // TODO test resp.getConfigVersions()
--- 730,754 ----
      createCluster(cluster1);
      String serviceName = "HDFS";
      clusters.getCluster(cluster1).setDesiredStackVersion(
+       new StackId("HDP-0.1"));
      createService(cluster1, serviceName, State.INIT);
+     Cluster c = clusters.getCluster(cluster1);
      Service s =
+       clusters.getCluster(cluster1).getService(serviceName);
      Assert.assertNotNull(s);
      Assert.assertEquals(serviceName, s.getName());
      Assert.assertEquals(cluster1, s.getCluster().getClusterName());
  
+     ServiceRequest req = new ServiceRequest(c.getClusterId(), serviceName, null);
  
      Set<ServiceResponse> r =
+       ServiceResourceProviderTest.getServices(controller, Collections.singleton(req));
      Assert.assertEquals(1, r.size());
      ServiceResponse resp = r.iterator().next();
      Assert.assertEquals(serviceName, resp.getServiceName());
      Assert.assertEquals(cluster1, resp.getClusterName());
      Assert.assertEquals(State.INIT.toString(),
+       resp.getDesiredState());
      Assert.assertEquals("HDP-0.1", resp.getDesiredStackVersion());
  
      // TODO test resp.getConfigVersions()
***************
*** 768,774 ****
  
      try {
        set1.clear();
-       ServiceRequest rInvalid = new ServiceRequest("foo", null, null);
        set1.add(rInvalid);
        ServiceResourceProviderTest.createServices(controller, set1);
        fail("Expected failure for invalid requests");
--- 774,780 ----
  
      try {
        set1.clear();
+       ServiceRequest rInvalid = new ServiceRequest(1L, null, null);
        set1.add(rInvalid);
        ServiceResourceProviderTest.createServices(controller, set1);
        fail("Expected failure for invalid requests");
***************
*** 778,784 ****
  
      try {
        set1.clear();
-       ServiceRequest rInvalid = new ServiceRequest("foo", "bar", null);
        set1.add(rInvalid);
        ServiceResourceProviderTest.createServices(controller, set1);
        fail("Expected failure for invalid cluster");
--- 784,790 ----
  
      try {
        set1.clear();
+       ServiceRequest rInvalid = new ServiceRequest(1L, "bar", null);
        set1.add(rInvalid);
        ServiceResourceProviderTest.createServices(controller, set1);
        fail("Expected failure for invalid cluster");
***************
*** 796,803 ****
  
      try {
        set1.clear();
-       ServiceRequest valid1 = new ServiceRequest(cluster1, "HDFS", null);
-       ServiceRequest valid2 = new ServiceRequest(cluster1, "HDFS", null);
        set1.add(valid1);
        set1.add(valid2);
        ServiceResourceProviderTest.createServices(controller, set1);
--- 802,809 ----
  
      try {
        set1.clear();
+       ServiceRequest valid1 = new ServiceRequest((clusters.getCluster(cluster1)).getClusterId(), "HDFS", null);
+       ServiceRequest valid2 = new ServiceRequest((clusters.getCluster(cluster2)).getClusterId(), "HDFS", null);
        set1.add(valid1);
        set1.add(valid2);
        ServiceResourceProviderTest.createServices(controller, set1);
***************
*** 808,814 ****
  
      try {
        set1.clear();
-       ServiceRequest valid1 = new ServiceRequest(cluster1, "bar", null);
        set1.add(valid1);
        ServiceResourceProviderTest.createServices(controller, set1);
        fail("Expected failure for invalid service");
--- 814,820 ----
  
      try {
        set1.clear();
+       ServiceRequest valid1 = new ServiceRequest((clusters.getCluster(cluster1)).getClusterId(), "bar", null);
        set1.add(valid1);
        ServiceResourceProviderTest.createServices(controller, set1);
        fail("Expected failure for invalid service");
***************
*** 819,826 ****
  
      try {
        set1.clear();
-       ServiceRequest valid1 = new ServiceRequest(cluster1, "HDFS", null);
-       ServiceRequest valid2 = new ServiceRequest(cluster2, "HDFS", null);
        set1.add(valid1);
        set1.add(valid2);
        ServiceResourceProviderTest.createServices(controller, set1);
--- 825,832 ----
  
      try {
        set1.clear();
+       ServiceRequest valid1 = new ServiceRequest((clusters.getCluster(cluster1)).getClusterId(), "HDFS", null);
+       ServiceRequest valid2 = new ServiceRequest((clusters.getCluster(cluster2)).getClusterId(), "HDFS", null);
        set1.add(valid1);
        set1.add(valid2);
        ServiceResourceProviderTest.createServices(controller, set1);
***************
*** 833,846 ****
      Assert.assertEquals(0, clusters.getCluster(cluster1).getServices().size());
  
      set1.clear();
-     ServiceRequest valid = new ServiceRequest(cluster1, "HDFS", null);
      set1.add(valid);
      ServiceResourceProviderTest.createServices(controller, set1);
  
      try {
        set1.clear();
-       ServiceRequest valid1 = new ServiceRequest(cluster1, "HDFS", null);
-       ServiceRequest valid2 = new ServiceRequest(cluster1, "HDFS", null);
        set1.add(valid1);
        set1.add(valid2);
        ServiceResourceProviderTest.createServices(controller, set1);
--- 839,852 ----
      Assert.assertEquals(0, clusters.getCluster(cluster1).getServices().size());
  
      set1.clear();
+     ServiceRequest valid = new ServiceRequest((clusters.getCluster(cluster1)).getClusterId(), "HDFS", null);
      set1.add(valid);
      ServiceResourceProviderTest.createServices(controller, set1);
  
      try {
        set1.clear();
+       ServiceRequest valid1 = new ServiceRequest((clusters.getCluster(cluster1)).getClusterId(), "HDFS", null);
+       ServiceRequest valid2 = new ServiceRequest((clusters.getCluster(cluster1)).getClusterId(), "HDFS", null);
        set1.add(valid1);
        set1.add(valid2);
        ServiceResourceProviderTest.createServices(controller, set1);
***************
*** 882,894 ****
      String serviceName2 = "MAPREDUCE";
      createService(cluster1, serviceName2, State.INIT);
  
-     ServiceRequest r = new ServiceRequest(cluster1, null, null);
      Set<ServiceResponse> response = ServiceResourceProviderTest.getServices(controller, Collections.singleton(r));
      Assert.assertEquals(2, response.size());
  
      for (ServiceResponse svc : response) {
        Assert.assertTrue(svc.getServiceName().equals(serviceName)
-           || svc.getServiceName().equals(serviceName2));
        Assert.assertEquals("HDP-0.1", svc.getDesiredStackVersion());
        Assert.assertEquals(State.INIT.toString(), svc.getDesiredState());
      }
--- 888,900 ----
      String serviceName2 = "MAPREDUCE";
      createService(cluster1, serviceName2, State.INIT);
  
+     ServiceRequest r = new ServiceRequest((clusters.getCluster(cluster1)).getClusterId(), null, null);
      Set<ServiceResponse> response = ServiceResourceProviderTest.getServices(controller, Collections.singleton(r));
      Assert.assertEquals(2, response.size());
  
      for (ServiceResponse svc : response) {
        Assert.assertTrue(svc.getServiceName().equals(serviceName)
+         || svc.getServiceName().equals(serviceName2));
        Assert.assertEquals("HDP-0.1", svc.getDesiredStackVersion());
        Assert.assertEquals(State.INIT.toString(), svc.getDesiredState());
      }
***************
*** 902,916 ****
  
      clusters.addCluster(cluster1, new StackId("HDP-0.1"));
  
-     ServiceRequest valid1 = new ServiceRequest(cluster1, "HDFS", null);
-     ServiceRequest valid2 = new ServiceRequest(cluster1, "MAPREDUCE", null);
      set1.add(valid1);
      set1.add(valid2);
      ServiceResourceProviderTest.createServices(controller, set1);
  
      try {
-       valid1 = new ServiceRequest(cluster1, "PIG", null);
-       valid2 = new ServiceRequest(cluster1, "MAPREDUCE", null);
        set1.add(valid1);
        set1.add(valid2);
        ServiceResourceProviderTest.createServices(controller, set1);
--- 908,922 ----
  
      clusters.addCluster(cluster1, new StackId("HDP-0.1"));
  
+     ServiceRequest valid1 = new ServiceRequest((clusters.getCluster(cluster1)).getClusterId(), "HDFS", null);
+     ServiceRequest valid2 = new ServiceRequest((clusters.getCluster(cluster1)).getClusterId(), "MAPREDUCE", null);
      set1.add(valid1);
      set1.add(valid2);
      ServiceResourceProviderTest.createServices(controller, set1);
  
      try {
+       valid1 = new ServiceRequest((clusters.getCluster(cluster1)).getClusterId(), "PIG", null);
+       valid2 = new ServiceRequest((clusters.getCluster(cluster1)).getClusterId(), "MAPREDUCE", null);
        set1.add(valid1);
        set1.add(valid2);
        ServiceResourceProviderTest.createServices(controller, set1);
***************
*** 1017,1023 ****
      c1.setDesiredStackVersion(stackId);
      helper.getOrCreateRepositoryVersion(stackId, stackId.getStackVersion());
      c1.createClusterVersion(stackId, stackId.getStackVersion(), "admin",
-         RepositoryVersionState.INSTALLING);
      Service s1 = serviceFactory.createNew(c1, "HDFS");
      Service s2 = serviceFactory.createNew(c1, "MAPREDUCE");
      c1.addService(s1);
--- 1023,1029 ----
      c1.setDesiredStackVersion(stackId);
      helper.getOrCreateRepositoryVersion(stackId, stackId.getStackVersion());
      c1.createClusterVersion(stackId, stackId.getStackVersion(), "admin",
+       RepositoryVersionState.INSTALLING);
      Service s1 = serviceFactory.createNew(c1, "HDFS");
      Service s2 = serviceFactory.createNew(c1, "MAPREDUCE");
      c1.addService(s1);
***************
*** 1349,1355 ****
  
      helper.getOrCreateRepositoryVersion(stackId, stackId.getStackVersion());
      c1.createClusterVersion(stackId, stackId.getStackVersion(), "admin",
-         RepositoryVersionState.INSTALLING);
  
      Service s1 = serviceFactory.createNew(c1, "HDFS");
      Service s2 = serviceFactory.createNew(c1, "MAPREDUCE");
--- 1355,1361 ----
  
      helper.getOrCreateRepositoryVersion(stackId, stackId.getStackVersion());
      c1.createClusterVersion(stackId, stackId.getStackVersion(), "admin",
+       RepositoryVersionState.INSTALLING);
  
      Service s1 = serviceFactory.createNew(c1, "HDFS");
      Service s2 = serviceFactory.createNew(c1, "MAPREDUCE");
***************
*** 1380,1406 ****
    }
  
    private void createServiceComponentHostSimple(String clusterName, String host1,
-       String host2) throws AmbariException, AuthorizationException {
      createCluster(clusterName);
      clusters.getCluster(clusterName)
-         .setDesiredStackVersion(new StackId("HDP-0.1"));
      String serviceName = "HDFS";
      createService(clusterName, serviceName, null);
      String componentName1 = "NAMENODE";
      String componentName2 = "DATANODE";
      String componentName3 = "HDFS_CLIENT";
      createServiceComponent(clusterName, serviceName, componentName1,
-         State.INIT);
      createServiceComponent(clusterName, serviceName, componentName2,
-         State.INIT);
      createServiceComponent(clusterName, serviceName, componentName3,
-         State.INIT);
  
      try {
        createServiceComponentHost(clusterName, serviceName, componentName1,
-           host1, State.INIT);
        fail("ServiceComponentHost creation should fail for invalid host"
-           + " as host not mapped to cluster");
      } catch (Exception e) {
        // Expected
      }
--- 1386,1412 ----
    }
  
    private void createServiceComponentHostSimple(String clusterName, String host1,
+                                                 String host2) throws AmbariException, AuthorizationException {
      createCluster(clusterName);
      clusters.getCluster(clusterName)
+       .setDesiredStackVersion(new StackId("HDP-0.1"));
      String serviceName = "HDFS";
      createService(clusterName, serviceName, null);
      String componentName1 = "NAMENODE";
      String componentName2 = "DATANODE";
      String componentName3 = "HDFS_CLIENT";
      createServiceComponent(clusterName, serviceName, componentName1,
+       State.INIT);
      createServiceComponent(clusterName, serviceName, componentName2,
+       State.INIT);
      createServiceComponent(clusterName, serviceName, componentName3,
+       State.INIT);
  
      try {
        createServiceComponentHost(clusterName, serviceName, componentName1,
+         host1, State.INIT);
        fail("ServiceComponentHost creation should fail for invalid host"
+         + " as host not mapped to cluster");
      } catch (Exception e) {
        // Expected
      }
***************
*** 1629,1655 ****
      foo.setDesiredStackVersion(stackId);
      foo.setCurrentStackVersion(stackId);
      foo.createClusterVersion(stackId, stackId.getStackVersion(), "admin",
-         RepositoryVersionState.INSTALLING);
      foo.transitionClusterVersion(stackId, stackId.getStackVersion(), RepositoryVersionState.CURRENT);
  
      stackId = new StackId("HDP-0.2");
      c1.setDesiredStackVersion(stackId);
      c1.setCurrentStackVersion(stackId);
      c1.createClusterVersion(stackId, stackId.getStackVersion(), "admin",
-         RepositoryVersionState.INSTALLING);
      c1.transitionClusterVersion(stackId, stackId.getStackVersion(), RepositoryVersionState.CURRENT);
  
      stackId = new StackId("HDP-0.2");
      c2.setDesiredStackVersion(stackId);
      c2.setCurrentStackVersion(stackId);
      c2.createClusterVersion(stackId, stackId.getStackVersion(), "admin",
-         RepositoryVersionState.INSTALLING);
      c2.transitionClusterVersion(stackId, stackId.getStackVersion(), RepositoryVersionState.CURRENT);
  
      try {
        set1.clear();
        ServiceComponentHostRequest rInvalid =
-           new ServiceComponentHostRequest(clusterFoo, "HDFS", "NAMENODE", host1, null);
        set1.add(rInvalid);
        controller.createHostComponents(set1);
        fail("Expected failure for invalid service");
--- 1635,1661 ----
      foo.setDesiredStackVersion(stackId);
      foo.setCurrentStackVersion(stackId);
      foo.createClusterVersion(stackId, stackId.getStackVersion(), "admin",
+       RepositoryVersionState.INSTALLING);
      foo.transitionClusterVersion(stackId, stackId.getStackVersion(), RepositoryVersionState.CURRENT);
  
      stackId = new StackId("HDP-0.2");
      c1.setDesiredStackVersion(stackId);
      c1.setCurrentStackVersion(stackId);
      c1.createClusterVersion(stackId, stackId.getStackVersion(), "admin",
+       RepositoryVersionState.INSTALLING);
      c1.transitionClusterVersion(stackId, stackId.getStackVersion(), RepositoryVersionState.CURRENT);
  
      stackId = new StackId("HDP-0.2");
      c2.setDesiredStackVersion(stackId);
      c2.setCurrentStackVersion(stackId);
      c2.createClusterVersion(stackId, stackId.getStackVersion(), "admin",
+       RepositoryVersionState.INSTALLING);
      c2.transitionClusterVersion(stackId, stackId.getStackVersion(), RepositoryVersionState.CURRENT);
  
      try {
        set1.clear();
        ServiceComponentHostRequest rInvalid =
+         new ServiceComponentHostRequest((clusters.getCluster(clusterFoo)).getClusterId(), "HDFS", "NAMENODE", host1, null);
        set1.add(rInvalid);
        controller.createHostComponents(set1);
        fail("Expected failure for invalid service");
***************
*** 1824,1830 ****
      setOsFamily(clusters.getHost(host1), "redhat", "5.9");
      setOsFamily(clusters.getHost(host2), "redhat", "5.9");
  
-     HostRequest request = new HostRequest(host2, "foo", new HashMap<String, String>());
      requests.add(request);
  
      try {
--- 1830,1836 ----
      setOsFamily(clusters.getHost(host1), "redhat", "5.9");
      setOsFamily(clusters.getHost(host2), "redhat", "5.9");
  
+     HostRequest request = new HostRequest(host2, (clusters.getCluster("foo")).getClusterId(), new HashMap<String, String>());
      requests.add(request);
  
      try {
***************
*** 1843,1849 ****
      c.setCurrentStackVersion(stackId);
      helper.getOrCreateRepositoryVersion(stackId, stackId.getStackVersion());
      c.createClusterVersion(stackId, stackId.getStackVersion(), "admin",
-         RepositoryVersionState.INSTALLING);
  
      HostResourceProviderTest.createHosts(controller, requests);
  
--- 1849,1855 ----
      c.setCurrentStackVersion(stackId);
      helper.getOrCreateRepositoryVersion(stackId, stackId.getStackVersion());
      c.createClusterVersion(stackId, stackId.getStackVersion(), "admin",
+       RepositoryVersionState.INSTALLING);
  
      HostResourceProviderTest.createHosts(controller, requests);
  
***************
*** 1872,1885 ****
      c.setCurrentStackVersion(stackID);
      helper.getOrCreateRepositoryVersion(stackID, stackID.getStackVersion());
      c.createClusterVersion(stackID, stackID.getStackVersion(), "admin",
-         RepositoryVersionState.INSTALLING);
  
      setOsFamily(clusters.getHost(host1), "redhat", "5.9");
      setOsFamily(clusters.getHost(host2), "redhat", "5.9");
      setOsFamily(clusters.getHost(host3), "redhat", "5.9");
  
-     HostRequest r1 = new HostRequest(host1, cluster1, null);
-     HostRequest r2 = new HostRequest(host2, cluster1, null);
      HostRequest r3 = new HostRequest(host3, null, null);
  
      Set<HostRequest> set1 = new HashSet<>();
--- 1878,1891 ----
      c.setCurrentStackVersion(stackID);
      helper.getOrCreateRepositoryVersion(stackID, stackID.getStackVersion());
      c.createClusterVersion(stackID, stackID.getStackVersion(), "admin",
+       RepositoryVersionState.INSTALLING);
  
      setOsFamily(clusters.getHost(host1), "redhat", "5.9");
      setOsFamily(clusters.getHost(host2), "redhat", "5.9");
      setOsFamily(clusters.getHost(host3), "redhat", "5.9");
  
+     HostRequest r1 = new HostRequest(host1, (clusters.getCluster(cluster1)).getClusterId(), null);
+     HostRequest r2 = new HostRequest(host2, (clusters.getCluster(cluster1)).getClusterId(), null);
      HostRequest r3 = new HostRequest(host3, null, null);
  
      Set<HostRequest> set1 = new HashSet<>();
***************
*** 1906,1912 ****
      try {
        set1.clear();
        HostRequest rInvalid =
-           new HostRequest(host1, null, null);
        set1.add(rInvalid);
        HostResourceProviderTest.createHosts(controller, set1);
        fail("Expected failure for invalid host");
--- 1912,1918 ----
      try {
        set1.clear();
        HostRequest rInvalid =
+         new HostRequest(host1, null, null);
        set1.add(rInvalid);
        HostResourceProviderTest.createHosts(controller, set1);
        fail("Expected failure for invalid host");
***************
*** 1919,1925 ****
      try {
        set1.clear();
        HostRequest rInvalid =
-           new HostRequest(host1, cluster1, null);
        set1.add(rInvalid);
        HostResourceProviderTest.createHosts(controller, set1);
        fail("Expected failure for invalid cluster");
--- 1925,1931 ----
      try {
        set1.clear();
        HostRequest rInvalid =
+         new HostRequest(host1, (clusters.getCluster(cluster1)).getClusterId(), null);
        set1.add(rInvalid);
        HostResourceProviderTest.createHosts(controller, set1);
        fail("Expected failure for invalid cluster");
***************
*** 1932,1940 ****
      try {
        set1.clear();
        HostRequest rInvalid1 =
-           new HostRequest(host1, cluster1, null);
        HostRequest rInvalid2 =
-           new HostRequest(host1, cluster1, null);
        set1.add(rInvalid1);
        set1.add(rInvalid2);
        HostResourceProviderTest.createHosts(controller, set1);
--- 1938,1946 ----
      try {
        set1.clear();
        HostRequest rInvalid1 =
+         new HostRequest(host1, (clusters.getCluster(cluster1)).getClusterId(), null);
        HostRequest rInvalid2 =
+         new HostRequest(host1, (clusters.getCluster(cluster1)).getClusterId(), null);
        set1.add(rInvalid1);
        set1.add(rInvalid2);
        HostResourceProviderTest.createHosts(controller, set1);
***************
*** 1970,1976 ****
      Config c1 = configFactory.createNew(cluster, "hdfs-site", "v1",  properties, propertiesAttributes);
      configs.put(c1.getType(), c1);
  
-     ServiceRequest r = new ServiceRequest(cluster1, serviceName, State.INSTALLED.toString());
      Set<ServiceRequest> requests = new HashSet<>();
      requests.add(r);
  
--- 1976,1982 ----
      Config c1 = configFactory.createNew(cluster, "hdfs-site", "v1",  properties, propertiesAttributes);
      configs.put(c1.getType(), c1);
  
+     ServiceRequest r = new ServiceRequest((clusters.getCluster(cluster1)).getClusterId(), serviceName, State.INSTALLED.toString());
      Set<ServiceRequest> requests = new HashSet<>();
      requests.add(r);
  
***************
*** 2019,2036 ****
      configs.put(c1.getType(), c1);
      configs.put(c2.getType(), c2);
  
-     ServiceRequest r = new ServiceRequest(cluster1, serviceName, State.INSTALLED.toString());
      Set<ServiceRequest> requests = new HashSet<>();
      requests.add(r);
  
      RequestStatusResponse trackAction =
-         ServiceResourceProviderTest.updateServices(controller, requests, mapRequestProps, true, false);
      Assert.assertEquals(State.INSTALLED,
-         clusters.getCluster(cluster1).getService(serviceName)
          .getDesiredState());
      for (ServiceComponent sc :
        clusters.getCluster(cluster1).getService(serviceName)
-       .getServiceComponents().values()) {
        Assert.assertEquals(State.INSTALLED, sc.getDesiredState());
        for (ServiceComponentHost sch : sc.getServiceComponentHosts().values()) {
          Assert.assertEquals(State.INSTALLED, sch.getDesiredState());
--- 2025,2042 ----
      configs.put(c1.getType(), c1);
      configs.put(c2.getType(), c2);
  
+     ServiceRequest r = new ServiceRequest((clusters.getCluster(cluster1)).getClusterId(), serviceName, State.INSTALLED.toString());
      Set<ServiceRequest> requests = new HashSet<>();
      requests.add(r);
  
      RequestStatusResponse trackAction =
+       ServiceResourceProviderTest.updateServices(controller, requests, mapRequestProps, true, false);
      Assert.assertEquals(State.INSTALLED,
+       clusters.getCluster(cluster1).getService(serviceName)
          .getDesiredState());
      for (ServiceComponent sc :
        clusters.getCluster(cluster1).getService(serviceName)
+         .getServiceComponents().values()) {
        Assert.assertEquals(State.INSTALLED, sc.getDesiredState());
        for (ServiceComponentHost sch : sc.getServiceComponentHosts().values()) {
          Assert.assertEquals(State.INSTALLED, sch.getDesiredState());
***************
*** 2049,2059 ****
  
      for (ShortTaskStatus taskStatus : taskStatuses) {
        LOG.debug("Task dump :"
-           + taskStatus.toString());
        Assert.assertEquals(RoleCommand.INSTALL.toString(),
-           taskStatus.getCommand());
        Assert.assertEquals(HostRoleStatus.PENDING.toString(),
-           taskStatus.getStatus());
        if (taskStatus.getHostName().equals(host1)) {
          if (Role.NAMENODE.toString().equals(taskStatus.getRole())) {
            foundH1NN = true;
--- 2055,2065 ----
  
      for (ShortTaskStatus taskStatus : taskStatuses) {
        LOG.debug("Task dump :"
+         + taskStatus.toString());
        Assert.assertEquals(RoleCommand.INSTALL.toString(),
+         taskStatus.getCommand());
        Assert.assertEquals(HostRoleStatus.PENDING.toString(),
+         taskStatus.getStatus());
        if (taskStatus.getHostName().equals(host1)) {
          if (Role.NAMENODE.toString().equals(taskStatus.getRole())) {
            foundH1NN = true;
***************
*** 2122,2145 ****
      // manually change live state to installed as no running action manager
      for (ServiceComponent sc :
        clusters.getCluster(cluster1).getService(serviceName)
-       .getServiceComponents().values()) {
        for (ServiceComponentHost sch : sc.getServiceComponentHosts().values()) {
          sch.setState(State.INSTALLED);
        }
      }
  
-     r = new ServiceRequest(cluster1, serviceName, State.STARTED.toString());
      requests.clear();
      requests.add(r);
      trackAction = ServiceResourceProviderTest.updateServices(controller, requests, mapRequestProps, true,
        false);
  
      Assert.assertEquals(State.STARTED,
-         clusters.getCluster(cluster1).getService(serviceName)
          .getDesiredState());
      for (ServiceComponent sc :
        clusters.getCluster(cluster1).getService(serviceName)
-       .getServiceComponents().values()) {
        if (sc.getName().equals("HDFS_CLIENT")) {
          Assert.assertEquals(State.INSTALLED, sc.getDesiredState());
        } else {
--- 2128,2151 ----
      // manually change live state to installed as no running action manager
      for (ServiceComponent sc :
        clusters.getCluster(cluster1).getService(serviceName)
+         .getServiceComponents().values()) {
        for (ServiceComponentHost sch : sc.getServiceComponentHosts().values()) {
          sch.setState(State.INSTALLED);
        }
      }
  
+     r = new ServiceRequest((clusters.getCluster(cluster1)).getClusterId(), serviceName, State.STARTED.toString());
      requests.clear();
      requests.add(r);
      trackAction = ServiceResourceProviderTest.updateServices(controller, requests, mapRequestProps, true,
        false);
  
      Assert.assertEquals(State.STARTED,
+       clusters.getCluster(cluster1).getService(serviceName)
          .getDesiredState());
      for (ServiceComponent sc :
        clusters.getCluster(cluster1).getService(serviceName)
+         .getServiceComponents().values()) {
        if (sc.getName().equals("HDFS_CLIENT")) {
          Assert.assertEquals(State.INSTALLED, sc.getDesiredState());
        } else {
***************
*** 2175,2192 ****
        }
      }
  
-     r = new ServiceRequest(cluster1, serviceName, State.INSTALLED.toString());
      requests.clear();
      requests.add(r);
      trackAction = ServiceResourceProviderTest.updateServices(controller, requests, mapRequestProps, true,
        false);
  
      Assert.assertEquals(State.INSTALLED,
-         clusters.getCluster(cluster1).getService(serviceName)
          .getDesiredState());
      for (ServiceComponent sc :
        clusters.getCluster(cluster1).getService(serviceName)
-       .getServiceComponents().values()) {
        Assert.assertEquals(State.INSTALLED, sc.getDesiredState());
        for (ServiceComponentHost sch : sc.getServiceComponentHosts().values()) {
          Assert.assertEquals(State.INSTALLED, sch.getDesiredState());
--- 2181,2198 ----
        }
      }
  
+     r = new ServiceRequest((clusters.getCluster(cluster1)).getClusterId(), serviceName, State.INSTALLED.toString());
      requests.clear();
      requests.add(r);
      trackAction = ServiceResourceProviderTest.updateServices(controller, requests, mapRequestProps, true,
        false);
  
      Assert.assertEquals(State.INSTALLED,
+       clusters.getCluster(cluster1).getService(serviceName)
          .getDesiredState());
      for (ServiceComponent sc :
        clusters.getCluster(cluster1).getService(serviceName)
+         .getServiceComponents().values()) {
        Assert.assertEquals(State.INSTALLED, sc.getDesiredState());
        for (ServiceComponentHost sch : sc.getServiceComponentHosts().values()) {
          Assert.assertEquals(State.INSTALLED, sch.getDesiredState());
***************
*** 2212,2218 ****
      c1.setDesiredStackVersion(stackId);
      helper.getOrCreateRepositoryVersion(stackId, stackId.getStackVersion());
      c1.createClusterVersion(stackId, stackId.getStackVersion(), "admin",
-         RepositoryVersionState.INSTALLING);
  
      ClusterRequest r = new ClusterRequest(null, null, null, null);
      Set<ClusterResponse> resp = controller.getClusters(Collections.singleton(r));
--- 2218,2224 ----
      c1.setDesiredStackVersion(stackId);
      helper.getOrCreateRepositoryVersion(stackId, stackId.getStackVersion());
      c1.createClusterVersion(stackId, stackId.getStackVersion(), "admin",
+       RepositoryVersionState.INSTALLING);
  
      ClusterRequest r = new ClusterRequest(null, null, null, null);
      Set<ClusterResponse> resp = controller.getClusters(Collections.singleton(r));
***************
*** 2257,2263 ****
      resp = controller.getClusters(Collections.singleton(r));
      Assert.assertEquals(1, resp.size());
      Assert.assertEquals(c1.getClusterId(),
-         resp.iterator().next().getClusterId().longValue());
  
      r = new ClusterRequest(null, null, "HDP-0.1", null);
      resp = controller.getClusters(Collections.singleton(r));
--- 2263,2269 ----
      resp = controller.getClusters(Collections.singleton(r));
      Assert.assertEquals(1, resp.size());
      Assert.assertEquals(c1.getClusterId(),
+       resp.iterator().next().getClusterId().longValue());
  
      r = new ClusterRequest(null, null, "HDP-0.1", null);
      resp = controller.getClusters(Collections.singleton(r));
***************
*** 2280,2297 ****
      s1.setDesiredStackVersion(new StackId("HDP-0.1"));
      s1.setDesiredState(State.INSTALLED);
  
-     ServiceRequest r = new ServiceRequest(cluster1, null, null);
      Set<ServiceResponse> resp = ServiceResourceProviderTest.getServices(controller, Collections.singleton(r));
  
      ServiceResponse resp1 = resp.iterator().next();
  
      Assert.assertEquals(s1.getClusterId(), resp1.getClusterId().longValue());
      Assert.assertEquals(s1.getCluster().getClusterName(),
-         resp1.getClusterName());
      Assert.assertEquals(s1.getName(), resp1.getServiceName());
      Assert.assertEquals("HDP-0.1", s1.getDesiredStackVersion().getStackId());
      Assert.assertEquals(s1.getDesiredStackVersion().getStackId(),
-         resp1.getDesiredStackVersion());
      Assert.assertEquals(State.INSTALLED.toString(), resp1.getDesiredState());
  
    }
--- 2286,2303 ----
      s1.setDesiredStackVersion(new StackId("HDP-0.1"));
      s1.setDesiredState(State.INSTALLED);
  
+     ServiceRequest r = new ServiceRequest((clusters.getCluster(cluster1)).getClusterId(), null, null);
      Set<ServiceResponse> resp = ServiceResourceProviderTest.getServices(controller, Collections.singleton(r));
  
      ServiceResponse resp1 = resp.iterator().next();
  
      Assert.assertEquals(s1.getClusterId(), resp1.getClusterId().longValue());
      Assert.assertEquals(s1.getCluster().getClusterName(),
+       resp1.getClusterName());
      Assert.assertEquals(s1.getName(), resp1.getServiceName());
      Assert.assertEquals("HDP-0.1", s1.getDesiredStackVersion().getStackId());
      Assert.assertEquals(s1.getDesiredStackVersion().getStackId(),
+       resp1.getDesiredStackVersion());
      Assert.assertEquals(State.INSTALLED.toString(), resp1.getDesiredState());
  
    }
***************
*** 2334,2368 ****
        // Expected
      }
  
-     r = new ServiceRequest(c1.getClusterName(), null, null);
      resp = ServiceResourceProviderTest.getServices(controller, Collections.singleton(r));
      Assert.assertEquals(3, resp.size());
  
-     r = new ServiceRequest(c1.getClusterName(), s2.getName(), null);
      resp = ServiceResourceProviderTest.getServices(controller, Collections.singleton(r));
      Assert.assertEquals(1, resp.size());
      Assert.assertEquals(s2.getName(), resp.iterator().next().getServiceName());
  
      try {
-       r = new ServiceRequest(c2.getClusterName(), s1.getName(), null);
        ServiceResourceProviderTest.getServices(controller, Collections.singleton(r));
        fail("Expected failure for invalid service");
      } catch (Exception e) {
        // Expected
      }
  
-     r = new ServiceRequest(c1.getClusterName(), null, "INSTALLED");
      resp = ServiceResourceProviderTest.getServices(controller, Collections.singleton(r));
      Assert.assertEquals(2, resp.size());
  
-     r = new ServiceRequest(c2.getClusterName(), null, "INIT");
      resp = ServiceResourceProviderTest.getServices(controller, Collections.singleton(r));
      Assert.assertEquals(1, resp.size());
  
      ServiceRequest r1, r2, r3;
-     r1 = new ServiceRequest(c1.getClusterName(), null, "INSTALLED");
-     r2 = new ServiceRequest(c2.getClusterName(), null, "INIT");
-     r3 = new ServiceRequest(c2.getClusterName(), null, "INIT");
  
      Set<ServiceRequest> reqs = new HashSet<>();
      reqs.addAll(Arrays.asList(r1, r2, r3));
--- 2340,2374 ----
        // Expected
      }
  
+     r = new ServiceRequest(c1.getClusterId(), null, null);
      resp = ServiceResourceProviderTest.getServices(controller, Collections.singleton(r));
      Assert.assertEquals(3, resp.size());
  
+     r = new ServiceRequest(c1.getClusterId(), s2.getName(), null);
      resp = ServiceResourceProviderTest.getServices(controller, Collections.singleton(r));
      Assert.assertEquals(1, resp.size());
      Assert.assertEquals(s2.getName(), resp.iterator().next().getServiceName());
  
      try {
+       r = new ServiceRequest(c2.getClusterId(), s1.getName(), null);
        ServiceResourceProviderTest.getServices(controller, Collections.singleton(r));
        fail("Expected failure for invalid service");
      } catch (Exception e) {
        // Expected
      }
  
+     r = new ServiceRequest(c1.getClusterId(), null, "INSTALLED");
      resp = ServiceResourceProviderTest.getServices(controller, Collections.singleton(r));
      Assert.assertEquals(2, resp.size());
  
+     r = new ServiceRequest(c2.getClusterId(), null, "INIT");
      resp = ServiceResourceProviderTest.getServices(controller, Collections.singleton(r));
      Assert.assertEquals(1, resp.size());
  
      ServiceRequest r1, r2, r3;
+     r1 = new ServiceRequest(c1.getClusterId(), null, "INSTALLED");
+     r2 = new ServiceRequest(c2.getClusterId(), null, "INIT");
+     r3 = new ServiceRequest(c2.getClusterId(), null, "INIT");
  
      Set<ServiceRequest> reqs = new HashSet<>();
      reqs.addAll(Arrays.asList(r1, r2, r3));
***************
*** 2438,2452 ****
      ServiceComponent sc1 = serviceComponentFactory.createNew(s1, "DATANODE");
      ServiceComponent sc2 = serviceComponentFactory.createNew(s1, "NAMENODE");
      ServiceComponent sc3 = serviceComponentFactory.createNew(s3,
-         "HBASE_REGIONSERVER");
      ServiceComponent sc4 = serviceComponentFactory.createNew(s4, "HIVE_SERVER");
      ServiceComponent sc5 = serviceComponentFactory.createNew(s4, "HIVE_CLIENT");
      ServiceComponent sc6 = serviceComponentFactory.createNew(s4,
-         "MYSQL_SERVER");
      ServiceComponent sc7 = serviceComponentFactory.createNew(s5,
-         "ZOOKEEPER_SERVER");
      ServiceComponent sc8 = serviceComponentFactory.createNew(s5,
-         "ZOOKEEPER_CLIENT");
  
      s1.addServiceComponent(sc1);
      s1.addServiceComponent(sc2);
--- 2444,2458 ----
      ServiceComponent sc1 = serviceComponentFactory.createNew(s1, "DATANODE");
      ServiceComponent sc2 = serviceComponentFactory.createNew(s1, "NAMENODE");
      ServiceComponent sc3 = serviceComponentFactory.createNew(s3,
+       "HBASE_REGIONSERVER");
      ServiceComponent sc4 = serviceComponentFactory.createNew(s4, "HIVE_SERVER");
      ServiceComponent sc5 = serviceComponentFactory.createNew(s4, "HIVE_CLIENT");
      ServiceComponent sc6 = serviceComponentFactory.createNew(s4,
+       "MYSQL_SERVER");
      ServiceComponent sc7 = serviceComponentFactory.createNew(s5,
+       "ZOOKEEPER_SERVER");
      ServiceComponent sc8 = serviceComponentFactory.createNew(s5,
+       "ZOOKEEPER_CLIENT");
  
      s1.addServiceComponent(sc1);
      s1.addServiceComponent(sc2);
***************
*** 2554,2577 ****
  
  
      ServiceComponentHostRequest r =
-         new ServiceComponentHostRequest(c1.getClusterName(),
-             null, null, null, null);
      Set<ServiceComponentHostResponse> resps = controller.getHostComponents(Collections.singleton(r));
      Assert.assertEquals(1, resps.size());
  
      ServiceComponentHostResponse resp =
-         resps.iterator().next();
  
-     Assert.assertEquals(c1.getClusterName(), resp.getClusterName());
      Assert.assertEquals(sc1.getName(), resp.getComponentName());
      Assert.assertEquals(s1.getName(), resp.getServiceName());
      Assert.assertEquals(sch1.getHostName(), resp.getHostname());
      Assert.assertEquals(sch1.getDesiredState().toString(),
-         resp.getDesiredState());
      Assert.assertEquals(sch1.getState().toString(),
-         resp.getLiveState());
      Assert.assertEquals(sch1.getStackVersion().getStackId(),
-         resp.getStackVersion());
      Assert.assertNotNull(resp.getActualConfigs());
      Assert.assertEquals(1, resp.getActualConfigs().size());
    }
--- 2560,2583 ----
  
  
      ServiceComponentHostRequest r =
+       new ServiceComponentHostRequest(c1.getClusterId(),
+         null, null, null, null);
      Set<ServiceComponentHostResponse> resps = controller.getHostComponents(Collections.singleton(r));
      Assert.assertEquals(1, resps.size());
  
      ServiceComponentHostResponse resp =
+       resps.iterator().next();
  
+     Assert.assertEquals(c1.getClusterName(), resp.getClusterId());
      Assert.assertEquals(sc1.getName(), resp.getComponentName());
      Assert.assertEquals(s1.getName(), resp.getServiceName());
      Assert.assertEquals(sch1.getHostName(), resp.getHostname());
      Assert.assertEquals(sch1.getDesiredState().toString(),
+       resp.getDesiredState());
      Assert.assertEquals(sch1.getState().toString(),
+       resp.getLiveState());
      Assert.assertEquals(sch1.getStackVersion().getStackId(),
+       resp.getStackVersion());
      Assert.assertNotNull(resp.getActualConfigs());
      Assert.assertEquals(1, resp.getActualConfigs().size());
    }
***************
*** 2769,2784 ****
      String cluster1 = getUniqueName();
      createCluster(cluster1);
      clusters.getCluster(cluster1)
-         .setDesiredStackVersion(new StackId("HDP-2.0.7"));
      String serviceName = "HBASE";
      createService(cluster1, serviceName, null);
      String componentName1 = "HBASE_MASTER";
      String componentName2 = "HBASE_REGIONSERVER";
  
      createServiceComponent(cluster1, serviceName, componentName1,
-         State.INIT);
      createServiceComponent(cluster1, serviceName, componentName2,
-         State.INIT);
  
      final String host1 = getUniqueName();
      final String host2 = getUniqueName();
--- 2775,2790 ----
      String cluster1 = getUniqueName();
      createCluster(cluster1);
      clusters.getCluster(cluster1)
+       .setDesiredStackVersion(new StackId("HDP-2.0.7"));
      String serviceName = "HBASE";
      createService(cluster1, serviceName, null);
      String componentName1 = "HBASE_MASTER";
      String componentName2 = "HBASE_REGIONSERVER";
  
      createServiceComponent(cluster1, serviceName, componentName1,
+       State.INIT);
      createServiceComponent(cluster1, serviceName, componentName2,
+       State.INIT);
  
      final String host1 = getUniqueName();
      final String host2 = getUniqueName();
***************
*** 2787,2802 ****
      addHostToCluster(host2, cluster1);
  
      createServiceComponentHost(cluster1, serviceName, componentName1,
-         host1, null);
      createServiceComponentHost(cluster1, serviceName, componentName1,
-         host2, null);
      createServiceComponentHost(cluster1, serviceName, componentName2,
-         host1, null);
      createServiceComponentHost(cluster1, serviceName, componentName2,
-         host2, null);
  
      RequestOperationLevel level = new RequestOperationLevel(
-             Resource.Type.HostComponent, cluster1, null, null, null);
  
      // Install
      installService(cluster1, serviceName, false, false);
--- 2793,2808 ----
      addHostToCluster(host2, cluster1);
  
      createServiceComponentHost(cluster1, serviceName, componentName1,
+       host1, null);
      createServiceComponentHost(cluster1, serviceName, componentName1,
+       host2, null);
      createServiceComponentHost(cluster1, serviceName, componentName2,
+       host1, null);
      createServiceComponentHost(cluster1, serviceName, componentName2,
+       host2, null);
  
      RequestOperationLevel level = new RequestOperationLevel(
+       Resource.Type.HostComponent, (clusters.getCluster(cluster1)).getClusterId(), null, null, null);
  
      // Install
      installService(cluster1, serviceName, false, false);
***************
*** 3164,3171 ****
      ServiceRequest r;
  
      try {
-       r = new ServiceRequest(cluster1, serviceName,
-           State.INSTALLING.toString());
        reqs.clear();
        reqs.add(r);
        ServiceResourceProviderTest.updateServices(controller, reqs, mapRequestProps, true, false);
--- 3170,3177 ----
      ServiceRequest r;
  
      try {
+       r = new ServiceRequest((clusters.getCluster(cluster1)).getClusterId(), serviceName,
+         State.INSTALLING.toString());
        reqs.clear();
        reqs.add(r);
        ServiceResourceProviderTest.updateServices(controller, reqs, mapRequestProps, true, false);
***************
*** 3174,3185 ****
        // Expected
      }
  
-     r = new ServiceRequest(cluster1, serviceName,
-         State.INSTALLED.toString());
      reqs.clear();
      reqs.add(r);
      RequestStatusResponse trackAction = ServiceResourceProviderTest.updateServices(controller, reqs,
-         mapRequestProps, true, false);
      Assert.assertNull(trackAction);
    }
  
--- 3180,3191 ----
        // Expected
      }
  
+     r = new ServiceRequest((clusters.getCluster(cluster1)).getClusterId(), serviceName,
+       State.INSTALLED.toString());
      reqs.clear();
      reqs.add(r);
      RequestStatusResponse trackAction = ServiceResourceProviderTest.updateServices(controller, reqs,
+       mapRequestProps, true, false);
      Assert.assertNull(trackAction);
    }
  
***************
*** 3220,3229 ****
      ServiceRequest req1, req2;
      try {
        reqs.clear();
-       req1 = new ServiceRequest(cluster1, serviceName1,
-           State.INSTALLED.toString());
-       req2 = new ServiceRequest(cluster2, serviceName2,
-           State.INSTALLED.toString());
        reqs.add(req1);
        reqs.add(req2);
        ServiceResourceProviderTest.updateServices(controller, reqs, mapRequestProps, true, false);
--- 3226,3235 ----
      ServiceRequest req1, req2;
      try {
        reqs.clear();
+       req1 = new ServiceRequest((clusters.getCluster(cluster1)).getClusterId(), serviceName1,
+         State.INSTALLED.toString());
+       req2 = new ServiceRequest((clusters.getCluster(cluster2)).getClusterId(), serviceName2,
+         State.INSTALLED.toString());
        reqs.add(req1);
        reqs.add(req2);
        ServiceResourceProviderTest.updateServices(controller, reqs, mapRequestProps, true, false);
***************
*** 3234,3243 ****
  
      try {
        reqs.clear();
-       req1 = new ServiceRequest(cluster1, serviceName1,
-           State.INSTALLED.toString());
-       req2 = new ServiceRequest(cluster1, serviceName1,
-           State.INSTALLED.toString());
        reqs.add(req1);
        reqs.add(req2);
        ServiceResourceProviderTest.updateServices(controller, reqs, mapRequestProps, true, false);
--- 3240,3249 ----
  
      try {
        reqs.clear();
+       req1 = new ServiceRequest((clusters.getCluster(cluster1)).getClusterId(), serviceName1,
+         State.INSTALLED.toString());
+       req2 = new ServiceRequest((clusters.getCluster(cluster1)).getClusterId(), serviceName1,
+         State.INSTALLED.toString());
        reqs.add(req1);
        reqs.add(req2);
        ServiceResourceProviderTest.updateServices(controller, reqs, mapRequestProps, true, false);
***************
*** 3247,3260 ****
      }
  
      clusters.getCluster(cluster1).getService(serviceName2)
-         .setDesiredState(State.INSTALLED);
  
      try {
        reqs.clear();
-       req1 = new ServiceRequest(cluster1, serviceName1,
-           State.INSTALLED.toString());
-       req2 = new ServiceRequest(cluster1, serviceName2,
-           State.STARTED.toString());
        reqs.add(req1);
        reqs.add(req2);
        ServiceResourceProviderTest.updateServices(controller, reqs, mapRequestProps, true, false);
--- 3253,3266 ----
      }
  
      clusters.getCluster(cluster1).getService(serviceName2)
+       .setDesiredState(State.INSTALLED);
  
      try {
        reqs.clear();
+       req1 = new ServiceRequest((clusters.getCluster(cluster1)).getClusterId(), serviceName1,
+         State.INSTALLED.toString());
+       req2 = new ServiceRequest((clusters.getCluster(cluster1)).getClusterId(), serviceName2,
+         State.STARTED.toString());
        reqs.add(req1);
        reqs.add(req2);
        ServiceResourceProviderTest.updateServices(controller, reqs, mapRequestProps, true, false);
***************
*** 3365,3372 ****
      ServiceRequest req1, req2;
      try {
        reqs.clear();
-       req1 = new ServiceRequest(cluster1, serviceName1,
-           State.STARTED.toString());
        reqs.add(req1);
        ServiceResourceProviderTest.updateServices(controller, reqs, mapRequestProps, true, false);
        fail("Expected failure for invalid state update");
--- 3371,3378 ----
      ServiceRequest req1, req2;
      try {
        reqs.clear();
+       req1 = new ServiceRequest((clusters.getCluster(cluster1)).getClusterId(), serviceName1,
+         State.STARTED.toString());
        reqs.add(req1);
        ServiceResourceProviderTest.updateServices(controller, reqs, mapRequestProps, true, false);
        fail("Expected failure for invalid state update");
***************
*** 3392,3399 ****
  
      try {
        reqs.clear();
-       req1 = new ServiceRequest(cluster1, serviceName1,
-           State.STARTED.toString());
        reqs.add(req1);
        ServiceResourceProviderTest.updateServices(controller, reqs, mapRequestProps, true, false);
        fail("Expected failure for invalid state update");
--- 3398,3405 ----
  
      try {
        reqs.clear();
+       req1 = new ServiceRequest((clusters.getCluster(cluster1)).getClusterId(), serviceName1,
+         State.STARTED.toString());
        reqs.add(req1);
        ServiceResourceProviderTest.updateServices(controller, reqs, mapRequestProps, true, false);
        fail("Expected failure for invalid state update");
***************
*** 3418,3427 ****
      sch5.setState(State.INSTALLED);
  
      reqs.clear();
-     req1 = new ServiceRequest(cluster1, serviceName1,
-         State.STARTED.toString());
-     req2 = new ServiceRequest(cluster1, serviceName2,
-         State.STARTED.toString());
      reqs.add(req1);
      reqs.add(req2);
      RequestStatusResponse trackAction = ServiceResourceProviderTest.updateServices(controller, reqs,
--- 3424,3433 ----
      sch5.setState(State.INSTALLED);
  
      reqs.clear();
+     req1 = new ServiceRequest((clusters.getCluster(cluster1)).getClusterId(), serviceName1,
+       State.STARTED.toString());
+     req2 = new ServiceRequest((clusters.getCluster(cluster1)).getClusterId(), serviceName2,
+       State.STARTED.toString());
      reqs.add(req1);
      reqs.add(req2);
      RequestStatusResponse trackAction = ServiceResourceProviderTest.updateServices(controller, reqs,
***************
*** 3506,3515 ****
  
      // test no-op
      reqs.clear();
-     req1 = new ServiceRequest(cluster1, serviceName1,
-         State.STARTED.toString());
-     req2 = new ServiceRequest(cluster1, serviceName2,
-         State.STARTED.toString());
      reqs.add(req1);
      reqs.add(req2);
      trackAction = ServiceResourceProviderTest.updateServices(controller, reqs, mapRequestProps, true,
--- 3512,3521 ----
  
      // test no-op
      reqs.clear();
+     req1 = new ServiceRequest((clusters.getCluster(cluster1)).getClusterId(), serviceName1,
+       State.STARTED.toString());
+     req2 = new ServiceRequest((clusters.getCluster(cluster1)).getClusterId(), serviceName2,
+       State.STARTED.toString());
      reqs.add(req1);
      reqs.add(req2);
      trackAction = ServiceResourceProviderTest.updateServices(controller, reqs, mapRequestProps, true,
***************
*** 3896,3904 ****
      String componentName1 = "NAMENODE";
      String componentName2 = "DATANODE";
      createServiceComponent(cluster1, serviceName1, componentName1,
-         State.INIT);
      createServiceComponent(cluster1, serviceName1, componentName2,
-         State.INIT);
      String host1 = getUniqueName();
      String host2 = getUniqueName();
      addHostToCluster(host1, cluster1);
--- 3902,3910 ----
      String componentName1 = "NAMENODE";
      String componentName2 = "DATANODE";
      createServiceComponent(cluster1, serviceName1, componentName1,
+       State.INIT);
      createServiceComponent(cluster1, serviceName1, componentName2,
+       State.INIT);
      String host1 = getUniqueName();
      String host2 = getUniqueName();
      addHostToCluster(host1, cluster1);
***************
*** 3907,3920 ****
      Set<ServiceComponentHostRequest> set1 =
        new HashSet<>();
      ServiceComponentHostRequest r1 =
-         new ServiceComponentHostRequest(cluster1, serviceName1,
-             componentName1, host1, State.INIT.toString());
      ServiceComponentHostRequest r2 =
-         new ServiceComponentHostRequest(cluster1, serviceName1,
-             componentName1, host2, State.INIT.toString());
      ServiceComponentHostRequest r3 =
-         new ServiceComponentHostRequest(cluster1, serviceName1,
-             componentName2, host1, State.INIT.toString());
  
      set1.add(r1);
      set1.add(r2);
--- 3913,3926 ----
      Set<ServiceComponentHostRequest> set1 =
        new HashSet<>();
      ServiceComponentHostRequest r1 =
+       new ServiceComponentHostRequest((clusters.getCluster(cluster1)).getClusterId(), serviceName1,
+         componentName1, host1, State.INIT.toString());
      ServiceComponentHostRequest r2 =
+       new ServiceComponentHostRequest((clusters.getCluster(cluster1)).getClusterId(), serviceName1,
+         componentName1, host2, State.INIT.toString());
      ServiceComponentHostRequest r3 =
+       new ServiceComponentHostRequest((clusters.getCluster(cluster1)).getClusterId(), serviceName1,
+         componentName2, host1, State.INIT.toString());
  
      set1.add(r1);
      set1.add(r2);
***************
*** 3954,3967 ****
      sch2.setDesiredStackVersion(oldStack);
  
      reqs.clear();
-     req1 = new ServiceComponentHostRequest(cluster1, serviceName1,
-         componentName1, host1,
-         State.INSTALLED.toString());
      req1.setDesiredStackId("HDP-0.2");
      reqs.add(req1);
-     req2 = new ServiceComponentHostRequest(cluster1, serviceName1,
-         componentName1, host2,
-         State.INSTALLED.toString());
      req2.setDesiredStackId("HDP-0.2");
      reqs.add(req2);
  
--- 3960,3973 ----
      sch2.setDesiredStackVersion(oldStack);
  
      reqs.clear();
+     req1 = new ServiceComponentHostRequest((clusters.getCluster(cluster1)).getClusterId(), serviceName1,
+       componentName1, host1,
+       State.INSTALLED.toString());
      req1.setDesiredStackId("HDP-0.2");
      reqs.add(req1);
+     req2 = new ServiceComponentHostRequest((clusters.getCluster(cluster1)).getClusterId(), serviceName1,
+       componentName1, host2,
+       State.INSTALLED.toString());
      req2.setDesiredStackId("HDP-0.2");
      reqs.add(req2);
  
***************
*** 3995,4013 ****
      sch3.setDesiredStackVersion(newStack);
  
      reqs.clear();
-     req1 = new ServiceComponentHostRequest(cluster1, serviceName1,
-         componentName1, host1,
-         State.INSTALLED.toString());
      req1.setDesiredStackId("HDP-0.2");
      reqs.add(req1);
-     req2 = new ServiceComponentHostRequest(cluster1, serviceName1,
-         componentName1, host2,
-         State.INSTALLED.toString());
      req2.setDesiredStackId("HDP-0.2");
      reqs.add(req2);
-     req3 = new ServiceComponentHostRequest(cluster1, serviceName1,
-         componentName2, host1,
-         State.INSTALLED.toString());
      req3.setDesiredStackId("HDP-0.2");
      reqs.add(req3);
  
--- 4001,4019 ----
      sch3.setDesiredStackVersion(newStack);
  
      reqs.clear();
+     req1 = new ServiceComponentHostRequest((clusters.getCluster(cluster1)).getClusterId(), serviceName1,
+       componentName1, host1,
+       State.INSTALLED.toString());
      req1.setDesiredStackId("HDP-0.2");
      reqs.add(req1);
+     req2 = new ServiceComponentHostRequest((clusters.getCluster(cluster1)).getClusterId(), serviceName1,
+       componentName1, host2,
+       State.INSTALLED.toString());
      req2.setDesiredStackId("HDP-0.2");
      reqs.add(req2);
+     req3 = new ServiceComponentHostRequest((clusters.getCluster(cluster1)).getClusterId(), serviceName1,
+       componentName2, host1,
+       State.INSTALLED.toString());
      req3.setDesiredStackId("HDP-0.2");
      reqs.add(req3);
  
***************
*** 4028,4034 ****
          Assert.assertTrue(execCommand.getCommandParams().containsKey("source_stack_version"));
          Assert.assertTrue(execCommand.getCommandParams().containsKey("target_stack_version"));
          Assert.assertEquals("{\"stackName\":\"HDP\",\"stackVersion\":\"0.2\"}",
-             execCommand.getCommandParams().get("target_stack_version"));
          Assert.assertEquals(RoleCommand.UPGRADE, execCommand.getRoleCommand());
        }
      }
--- 4034,4040 ----
          Assert.assertTrue(execCommand.getCommandParams().containsKey("source_stack_version"));
          Assert.assertTrue(execCommand.getCommandParams().containsKey("target_stack_version"));
          Assert.assertEquals("{\"stackName\":\"HDP\",\"stackVersion\":\"0.2\"}",
+           execCommand.getCommandParams().get("target_stack_version"));
          Assert.assertEquals(RoleCommand.UPGRADE, execCommand.getRoleCommand());
        }
      }
***************
*** 4043,4049 ****
      createService(cluster1, serviceName1, null);
      String componentName1 = "NAMENODE";
      createServiceComponent(cluster1, serviceName1, componentName1,
-         State.INIT);
      String host1 = getUniqueName();
      String host2 = getUniqueName();
      addHostToCluster(host1, cluster1);
--- 4049,4055 ----
      createService(cluster1, serviceName1, null);
      String componentName1 = "NAMENODE";
      createServiceComponent(cluster1, serviceName1, componentName1,
+       State.INIT);
      String host1 = getUniqueName();
      String host2 = getUniqueName();
      addHostToCluster(host1, cluster1);
***************
*** 4052,4062 ****
      Set<ServiceComponentHostRequest> set1 =
        new HashSet<>();
      ServiceComponentHostRequest r1 =
-         new ServiceComponentHostRequest(cluster1, serviceName1,
-             componentName1, host1, State.INIT.toString());
      ServiceComponentHostRequest r2 =
-         new ServiceComponentHostRequest(cluster1, serviceName1,
-             componentName1, host2, State.INIT.toString());
  
      set1.add(r1);
      set1.add(r2);
--- 4058,4068 ----
      Set<ServiceComponentHostRequest> set1 =
        new HashSet<>();
      ServiceComponentHostRequest r1 =
+       new ServiceComponentHostRequest((clusters.getCluster(cluster1)).getClusterId(), serviceName1,
+         componentName1, host1, State.INIT.toString());
      ServiceComponentHostRequest r2 =
+       new ServiceComponentHostRequest((clusters.getCluster(cluster1)).getClusterId(), serviceName1,
+         componentName1, host2, State.INIT.toString());
  
      set1.add(r1);
      set1.add(r2);
***************
*** 4077,4084 ****
        new HashSet<>();
  
      reqs.clear();
-     req1 = new ServiceComponentHostRequest(cluster1, serviceName1,
-         componentName1, host1, State.STARTED.toString());
      req1.setDesiredStackId("invalid stack id");
      reqs.add(req1);
      updateHostAndCompareExpectedFailure(reqs, "Invalid desired stack id");
--- 4083,4090 ----
        new HashSet<>();
  
      reqs.clear();
+     req1 = new ServiceComponentHostRequest((clusters.getCluster(cluster1)).getClusterId(), serviceName1,
+       componentName1, host1, State.STARTED.toString());
      req1.setDesiredStackId("invalid stack id");
      reqs.add(req1);
      updateHostAndCompareExpectedFailure(reqs, "Invalid desired stack id");
***************
*** 4086,4112 ****
      c1.setCurrentStackVersion(new StackId("HDP-0.0"));
      sch1.setStackVersion(new StackId("HDP-0.1"));
      reqs.clear();
-     req1 = new ServiceComponentHostRequest(cluster1, serviceName1,
-         componentName1, host1,
-         State.STARTED.toString());
      req1.setDesiredStackId("HDP-0.2");
      reqs.add(req1);
      updateHostAndCompareExpectedFailure(reqs, "Cluster has not been upgraded yet");
  
      c1.setCurrentStackVersion(new StackId("HDP2-0.1"));
      reqs.clear();
-     req1 = new ServiceComponentHostRequest(cluster1, serviceName1,
-         componentName1, host1,
-         State.STARTED.toString());
      req1.setDesiredStackId("HDP-0.2");
      reqs.add(req1);
      updateHostAndCompareExpectedFailure(reqs, "Deployed stack name and requested stack names");
  
      c1.setCurrentStackVersion(new StackId("HDP-0.2"));
      reqs.clear();
-     req1 = new ServiceComponentHostRequest(cluster1, serviceName1,
-         componentName1, host1,
-         State.STARTED.toString());
      req1.setDesiredStackId("HDP-0.3");
      reqs.add(req1);
      updateHostAndCompareExpectedFailure(reqs, "Component host can only be upgraded to the same version");
--- 4092,4118 ----
      c1.setCurrentStackVersion(new StackId("HDP-0.0"));
      sch1.setStackVersion(new StackId("HDP-0.1"));
      reqs.clear();
+     req1 = new ServiceComponentHostRequest((clusters.getCluster(cluster1)).getClusterId(), serviceName1,
+       componentName1, host1,
+       State.STARTED.toString());
      req1.setDesiredStackId("HDP-0.2");
      reqs.add(req1);
      updateHostAndCompareExpectedFailure(reqs, "Cluster has not been upgraded yet");
  
      c1.setCurrentStackVersion(new StackId("HDP2-0.1"));
      reqs.clear();
+     req1 = new ServiceComponentHostRequest((clusters.getCluster(cluster1)).getClusterId(), serviceName1,
+       componentName1, host1,
+       State.STARTED.toString());
      req1.setDesiredStackId("HDP-0.2");
      reqs.add(req1);
      updateHostAndCompareExpectedFailure(reqs, "Deployed stack name and requested stack names");
  
      c1.setCurrentStackVersion(new StackId("HDP-0.2"));
      reqs.clear();
+     req1 = new ServiceComponentHostRequest((clusters.getCluster(cluster1)).getClusterId(), serviceName1,
+       componentName1, host1,
+       State.STARTED.toString());
      req1.setDesiredStackId("HDP-0.3");
      reqs.add(req1);
      updateHostAndCompareExpectedFailure(reqs, "Component host can only be upgraded to the same version");
***************
*** 4114,4122 ****
      c1.setCurrentStackVersion(new StackId("HDP-0.2"));
      sch1.setState(State.STARTED);
      reqs.clear();
-     req1 = new ServiceComponentHostRequest(cluster1, serviceName1,
-         componentName1, host1,
-         State.STARTED.toString());
      req1.setDesiredStackId("HDP-0.2");
      reqs.add(req1);
      updateHostAndCompareExpectedFailure(reqs, "Component host is in an invalid state for upgrade");
--- 4120,4128 ----
      c1.setCurrentStackVersion(new StackId("HDP-0.2"));
      sch1.setState(State.STARTED);
      reqs.clear();
+     req1 = new ServiceComponentHostRequest((clusters.getCluster(cluster1)).getClusterId(), serviceName1,
+       componentName1, host1,
+       State.STARTED.toString());
      req1.setDesiredStackId("HDP-0.2");
      reqs.add(req1);
      updateHostAndCompareExpectedFailure(reqs, "Component host is in an invalid state for upgrade");
***************
*** 4124,4132 ****
      c1.setCurrentStackVersion(new StackId("HDP-0.2"));
      sch1.setState(State.UPGRADING);
      reqs.clear();
-     req1 = new ServiceComponentHostRequest(cluster1, serviceName1,
-         componentName1, host1,
-         State.STARTED.toString());
      req1.setDesiredStackId("HDP-0.2");
      reqs.add(req1);
      updateHostAndCompareExpectedFailure(reqs, "The desired state for an upgrade request must be");
--- 4130,4138 ----
      c1.setCurrentStackVersion(new StackId("HDP-0.2"));
      sch1.setState(State.UPGRADING);
      reqs.clear();
+     req1 = new ServiceComponentHostRequest((clusters.getCluster(cluster1)).getClusterId(), serviceName1,
+       componentName1, host1,
+       State.STARTED.toString());
      req1.setDesiredStackId("HDP-0.2");
      reqs.add(req1);
      updateHostAndCompareExpectedFailure(reqs, "The desired state for an upgrade request must be");
***************
*** 4134,4141 ****
      c1.setCurrentStackVersion(new StackId("HDP-0.2"));
      sch1.setState(State.UPGRADING);
      reqs.clear();
-     req1 = new ServiceComponentHostRequest(cluster1, serviceName1,
-         componentName1, host1, null);
      req1.setDesiredStackId("HDP-0.2");
      reqs.add(req1);
      updateHostAndCompareExpectedFailure(reqs, "The desired state for an upgrade request must be");
--- 4140,4147 ----
      c1.setCurrentStackVersion(new StackId("HDP-0.2"));
      sch1.setState(State.UPGRADING);
      reqs.clear();
+     req1 = new ServiceComponentHostRequest((clusters.getCluster(cluster1)).getClusterId(), serviceName1,
+       componentName1, host1, null);
      req1.setDesiredStackId("HDP-0.2");
      reqs.add(req1);
      updateHostAndCompareExpectedFailure(reqs, "The desired state for an upgrade request must be");
***************
*** 4146,4159 ****
      sch2.setState(State.INSTALLED);
      sch2.setDesiredState(State.INSTALLED);
      reqs.clear();
-     req1 = new ServiceComponentHostRequest(cluster1, serviceName1,
-         componentName1, host1,
-         State.INSTALLED.toString());
      req1.setDesiredStackId("HDP-0.2");
      reqs.add(req1);
-     req2 = new ServiceComponentHostRequest(cluster1, serviceName1,
-         componentName1, host2,
-         State.STARTED.toString());
      reqs.add(req2);
      updateHostAndCompareExpectedFailure(reqs, "An upgrade request cannot be combined with other");
  
--- 4152,4165 ----
      sch2.setState(State.INSTALLED);
      sch2.setDesiredState(State.INSTALLED);
      reqs.clear();
+     req1 = new ServiceComponentHostRequest((clusters.getCluster(cluster1)).getClusterId(), serviceName1,
+       componentName1, host1,
+       State.INSTALLED.toString());
      req1.setDesiredStackId("HDP-0.2");
      reqs.add(req1);
+     req2 = new ServiceComponentHostRequest((clusters.getCluster(cluster1)).getClusterId(), serviceName1,
+       componentName1, host2,
+       State.STARTED.toString());
      reqs.add(req2);
      updateHostAndCompareExpectedFailure(reqs, "An upgrade request cannot be combined with other");
  
***************
*** 4161,4183 ****
      sch1.setState(State.INSTALLED);
      sch1.setStackVersion(new StackId("HDP-0.2"));
      reqs.clear();
-     req1 = new ServiceComponentHostRequest(cluster1, serviceName1,
-         componentName1, host1,
-         null);
      req1.setDesiredStackId("HDP-0.2");
      reqs.add(req1);
  
      RequestStatusResponse resp = updateHostComponents(reqs,
-         Collections.<String,String>emptyMap(), true);
      Assert.assertNull(resp);
  
      c1.setCurrentStackVersion(new StackId("HDP-0.2"));
      sch1.setState(State.INSTALLED);
      sch1.setStackVersion(new StackId("HDP-0.2"));
      reqs.clear();
-     req1 = new ServiceComponentHostRequest(cluster1, serviceName1,
-         componentName1, host1,
-         State.INSTALLED.toString());
      req1.setDesiredStackId("HDP-0.2");
      reqs.add(req1);
      resp = updateHostComponents(reqs, Collections.<String,String>emptyMap(), true);
--- 4167,4189 ----
      sch1.setState(State.INSTALLED);
      sch1.setStackVersion(new StackId("HDP-0.2"));
      reqs.clear();
+     req1 = new ServiceComponentHostRequest((clusters.getCluster(cluster1)).getClusterId(), serviceName1,
+       componentName1, host1,
+       null);
      req1.setDesiredStackId("HDP-0.2");
      reqs.add(req1);
  
      RequestStatusResponse resp = updateHostComponents(reqs,
+       Collections.<String,String>emptyMap(), true);
      Assert.assertNull(resp);
  
      c1.setCurrentStackVersion(new StackId("HDP-0.2"));
      sch1.setState(State.INSTALLED);
      sch1.setStackVersion(new StackId("HDP-0.2"));
      reqs.clear();
+     req1 = new ServiceComponentHostRequest((clusters.getCluster(cluster1)).getClusterId(), serviceName1,
+       componentName1, host1,
+       State.INSTALLED.toString());
      req1.setDesiredStackId("HDP-0.2");
      reqs.add(req1);
      resp = updateHostComponents(reqs, Collections.<String,String>emptyMap(), true);
***************
*** 4319,4404 ****
      String actionDef4 = getUniqueName();
  
      controller.getAmbariMetaInfo().addActionDefinition(new ActionDefinition(
-         actionDef1, ActionType.SYSTEM, "test,dirName", "", "", "Does file exist",
-         TargetHostType.SPECIFIC, Short.valueOf("100"), null));
  
      controller.getAmbariMetaInfo().addActionDefinition(new ActionDefinition(
-         actionDef2, ActionType.SYSTEM, "", "HDFS", "DATANODE", "Does file exist",
-         TargetHostType.ANY, Short.valueOf("100"), null));
  
      controller.getAmbariMetaInfo().addActionDefinition(new ActionDefinition(
-             "update_repo", ActionType.SYSTEM, "", "HDFS", "DATANODE", "Does file exist",
-             TargetHostType.ANY, Short.valueOf("100"), null));
  
      controller.getAmbariMetaInfo().addActionDefinition(new ActionDefinition(
-         actionDef3, ActionType.SYSTEM, "", "MAPREDUCE", "MAPREDUCE_CLIENT", "Does file exist",
-         TargetHostType.ANY, Short.valueOf("100"), null));
  
      controller.getAmbariMetaInfo().addActionDefinition(new ActionDefinition(
-         actionDef4, ActionType.SYSTEM, "", "HIVE", "", "Does file exist",
-         TargetHostType.ANY, Short.valueOf("100"), null));
  
-     actionRequest = new ExecuteActionRequest(cluster1, null, actionDef1, null, null, null, false);
      expectActionCreationErrorWithMessage(actionRequest, requestProperties,
-         "Action " + actionDef1 + " requires input 'test' that is not provided");
  
-     actionRequest = new ExecuteActionRequest(cluster1, null, actionDef1, null, null, params, false);
      expectActionCreationErrorWithMessage(actionRequest, requestProperties,
-         "Action " + actionDef1 + " requires input 'dirName' that is not provided");
  
      params.put("dirName", "dirName");
-     actionRequest = new ExecuteActionRequest(cluster1, null, actionDef1, null, null, params, false);
      expectActionCreationErrorWithMessage(actionRequest, requestProperties,
-         "Action " + actionDef1 + " requires explicit target host(s)");
  
      resourceFilters.clear();
      resourceFilter = new RequestResourceFilter("HIVE", null, null);
      resourceFilters.add(resourceFilter);
  
-     actionRequest = new ExecuteActionRequest(cluster1, null, actionDef2, resourceFilters, null, params, false);
      expectActionCreationErrorWithMessage(actionRequest, requestProperties,
-         "Action " + actionDef2 + " targets service HIVE that does not match with expected HDFS");
  
      resourceFilters.clear();
      resourceFilter = new RequestResourceFilter("HDFS", "HDFS_CLIENT", null);
      resourceFilters.add(resourceFilter);
  
-     actionRequest = new ExecuteActionRequest(cluster1, null, actionDef2, resourceFilters, null, params, false);
      expectActionCreationErrorWithMessage(actionRequest, requestProperties,
-         "Action " + actionDef2 + " targets component HDFS_CLIENT that does not match with expected DATANODE");
  
      resourceFilters.clear();
      resourceFilter = new RequestResourceFilter("HDFS2", "HDFS_CLIENT", null);
      resourceFilters.add(resourceFilter);
  
-     actionRequest = new ExecuteActionRequest(cluster1, null, actionDef1, resourceFilters, null, params, false);
      expectActionCreationErrorWithMessage(actionRequest, requestProperties,
-         "Action " + actionDef1 + " targets service HDFS2 that does not exist");
  
      resourceFilters.clear();
      resourceFilter = new RequestResourceFilter("HDFS", "HDFS_CLIENT2", null);
      resourceFilters.add(resourceFilter);
  
-     actionRequest = new ExecuteActionRequest(cluster1, null, actionDef1, resourceFilters, null, params, false);
      expectActionCreationErrorWithMessage(actionRequest, requestProperties,
-         "Action " + actionDef1 + " targets component HDFS_CLIENT2 that does not exist");
  
      resourceFilters.clear();
      resourceFilter = new RequestResourceFilter("", "HDFS_CLIENT2", null);
      resourceFilters.add(resourceFilter);
  
-     actionRequest = new ExecuteActionRequest(cluster1, null, actionDef1, resourceFilters, null, params, false);
      expectActionCreationErrorWithMessage(actionRequest, requestProperties,
-         "Action " + actionDef1 + " targets component HDFS_CLIENT2 without specifying the target service");
  
      resourceFilters.clear();
      resourceFilter = new RequestResourceFilter("", "", null);
      resourceFilters.add(resourceFilter);
  
      // targets a service that is not a member of the stack (e.g. MR not in HDP-2)
-     actionRequest = new ExecuteActionRequest(cluster1, null, actionDef3, resourceFilters, null, params, false);
      expectActionCreationErrorWithMessage(actionRequest, requestProperties,
-         "Action " + actionDef3 + " targets service MAPREDUCE that does not exist");
  
      hosts = new ArrayList<>();
      hosts.add("h6");
--- 4325,4410 ----
      String actionDef4 = getUniqueName();
  
      controller.getAmbariMetaInfo().addActionDefinition(new ActionDefinition(
+       actionDef1, ActionType.SYSTEM, "test,dirName", "", "", "Does file exist",
+       TargetHostType.SPECIFIC, Short.valueOf("100"), null));
  
      controller.getAmbariMetaInfo().addActionDefinition(new ActionDefinition(
+       actionDef2, ActionType.SYSTEM, "", "HDFS", "DATANODE", "Does file exist",
+       TargetHostType.ANY, Short.valueOf("100"), null));
  
      controller.getAmbariMetaInfo().addActionDefinition(new ActionDefinition(
+       "update_repo", ActionType.SYSTEM, "", "HDFS", "DATANODE", "Does file exist",
+       TargetHostType.ANY, Short.valueOf("100"), null));
  
      controller.getAmbariMetaInfo().addActionDefinition(new ActionDefinition(
+       actionDef3, ActionType.SYSTEM, "", "MAPREDUCE", "MAPREDUCE_CLIENT", "Does file exist",
+       TargetHostType.ANY, Short.valueOf("100"), null));
  
      controller.getAmbariMetaInfo().addActionDefinition(new ActionDefinition(
+       actionDef4, ActionType.SYSTEM, "", "HIVE", "", "Does file exist",
+       TargetHostType.ANY, Short.valueOf("100"), null));
  
+     actionRequest = new ExecuteActionRequest((clusters.getCluster(cluster1)).getClusterId(), null, actionDef1, null, null, null, false);
      expectActionCreationErrorWithMessage(actionRequest, requestProperties,
+       "Action " + actionDef1 + " requires input 'test' that is not provided");
  
+     actionRequest = new ExecuteActionRequest((clusters.getCluster(cluster1)).getClusterId(), null, actionDef1, null, null, params, false);
      expectActionCreationErrorWithMessage(actionRequest, requestProperties,
+       "Action " + actionDef1 + " requires input 'dirName' that is not provided");
  
      params.put("dirName", "dirName");
+     actionRequest = new ExecuteActionRequest((clusters.getCluster(cluster1)).getClusterId(), null, actionDef1, null, null, params, false);
      expectActionCreationErrorWithMessage(actionRequest, requestProperties,
+       "Action " + actionDef1 + " requires explicit target host(s)");
  
      resourceFilters.clear();
      resourceFilter = new RequestResourceFilter("HIVE", null, null);
      resourceFilters.add(resourceFilter);
  
+     actionRequest = new ExecuteActionRequest((clusters.getCluster(cluster1)).getClusterId(), null, actionDef2, resourceFilters, null, params, false);
      expectActionCreationErrorWithMessage(actionRequest, requestProperties,
+       "Action " + actionDef2 + " targets service HIVE that does not match with expected HDFS");
  
      resourceFilters.clear();
      resourceFilter = new RequestResourceFilter("HDFS", "HDFS_CLIENT", null);
      resourceFilters.add(resourceFilter);
  
+     actionRequest = new ExecuteActionRequest((clusters.getCluster(cluster1)).getClusterId(), null, actionDef2, resourceFilters, null, params, false);
      expectActionCreationErrorWithMessage(actionRequest, requestProperties,
+       "Action " + actionDef2 + " targets component HDFS_CLIENT that does not match with expected DATANODE");
  
      resourceFilters.clear();
      resourceFilter = new RequestResourceFilter("HDFS2", "HDFS_CLIENT", null);
      resourceFilters.add(resourceFilter);
  
+     actionRequest = new ExecuteActionRequest((clusters.getCluster(cluster1)).getClusterId(), null, actionDef1, resourceFilters, null, params, false);
      expectActionCreationErrorWithMessage(actionRequest, requestProperties,
+       "Action " + actionDef1 + " targets service HDFS2 that does not exist");
  
      resourceFilters.clear();
      resourceFilter = new RequestResourceFilter("HDFS", "HDFS_CLIENT2", null);
      resourceFilters.add(resourceFilter);
  
+     actionRequest = new ExecuteActionRequest((clusters.getCluster(cluster1)).getClusterId(), null, actionDef1, resourceFilters, null, params, false);
      expectActionCreationErrorWithMessage(actionRequest, requestProperties,
+       "Action " + actionDef1 + " targets component HDFS_CLIENT2 that does not exist");
  
      resourceFilters.clear();
      resourceFilter = new RequestResourceFilter("", "HDFS_CLIENT2", null);
      resourceFilters.add(resourceFilter);
  
+     actionRequest = new ExecuteActionRequest((clusters.getCluster(cluster1)).getClusterId(), null, actionDef1, resourceFilters, null, params, false);
      expectActionCreationErrorWithMessage(actionRequest, requestProperties,
+       "Action " + actionDef1 + " targets component HDFS_CLIENT2 without specifying the target service");
  
      resourceFilters.clear();
      resourceFilter = new RequestResourceFilter("", "", null);
      resourceFilters.add(resourceFilter);
  
      // targets a service that is not a member of the stack (e.g. MR not in HDP-2)
+     actionRequest = new ExecuteActionRequest((clusters.getCluster(cluster1)).getClusterId(), null, actionDef3, resourceFilters, null, params, false);
      expectActionCreationErrorWithMessage(actionRequest, requestProperties,
+       "Action " + actionDef3 + " targets service MAPREDUCE that does not exist");
  
      hosts = new ArrayList<>();
      hosts.add("h6");
***************
*** 4416,4432 ****
      resourceFilter = new RequestResourceFilter("", "", hosts);
      resourceFilters.add(resourceFilter);
      params.put("success_factor", "1r");
-     actionRequest = new ExecuteActionRequest(cluster1, null, "update_repo", resourceFilters, null, params, false);
      expectActionCreationErrorWithMessage(actionRequest, requestProperties,
-             "Failed to cast success_factor value to float!");
  
      resourceFilters.clear();
      resourceFilter = new RequestResourceFilter("HIVE", "", null);
      resourceFilters.add(resourceFilter);
  
-     actionRequest = new ExecuteActionRequest(cluster1, null, actionDef4, resourceFilters, null, params, false);
      expectActionCreationErrorWithMessage(actionRequest, requestProperties,
-         "Suitable hosts not found, component=, service=HIVE, cluster=" + cluster1 + ", actionName=" + actionDef4);
  
    }
  
--- 4422,4438 ----
      resourceFilter = new RequestResourceFilter("", "", hosts);
      resourceFilters.add(resourceFilter);
      params.put("success_factor", "1r");
+     actionRequest = new ExecuteActionRequest((clusters.getCluster(cluster1)).getClusterId(), null, "update_repo", resourceFilters, null, params, false);
      expectActionCreationErrorWithMessage(actionRequest, requestProperties,
+       "Failed to cast success_factor value to float!");
  
      resourceFilters.clear();
      resourceFilter = new RequestResourceFilter("HIVE", "", null);
      resourceFilters.add(resourceFilter);
  
+     actionRequest = new ExecuteActionRequest((clusters.getCluster(cluster1)).getClusterId(), null, actionDef4, resourceFilters, null, params, false);
      expectActionCreationErrorWithMessage(actionRequest, requestProperties,
+       "Suitable hosts not found, component=, service=HIVE, cluster=" + cluster1 + ", actionName=" + actionDef4);
  
    }
  
***************
*** 4649,4753 ****
  
      // null service should work
      createServiceComponentHost(cluster1, null, componentName1,
-             host1, null);
      createServiceComponentHost(cluster1, serviceName, componentName2,
-             host1, null);
      createServiceComponentHost(cluster1, serviceName, componentName2,
-             host2, null);
      createServiceComponentHost(cluster1, serviceName, componentName3,
-             host1, null);
      createServiceComponentHost(cluster1, serviceName, componentName3,
-             host2, null);
  
      Assert.assertNotNull(clusters.getCluster(cluster1)
-             .getService(serviceName)
-             .getServiceComponent(componentName1)
-             .getServiceComponentHost(host1));
      Assert.assertNotNull(clusters.getCluster(cluster1)
-             .getService(serviceName)
-             .getServiceComponent(componentName2)
-             .getServiceComponentHost(host1));
      Assert.assertNotNull(clusters.getCluster(cluster1)
-             .getService(serviceName)
-             .getServiceComponent(componentName2)
-             .getServiceComponentHost(host2));
      Assert.assertNotNull(clusters.getCluster(cluster1)
-             .getService(serviceName)
-             .getServiceComponent(componentName3)
-             .getServiceComponentHost(host1));
      Assert.assertNotNull(clusters.getCluster(cluster1)
-             .getService(serviceName)
-             .getServiceComponent(componentName3)
-             .getServiceComponentHost(host2));
  
      // Install
-     ServiceRequest r = new ServiceRequest(cluster1, serviceName,
-         State.INSTALLED.toString());
      Set<ServiceRequest> requests = new HashSet<>();
      requests.add(r);
  
      ServiceResourceProviderTest.updateServices(controller, requests, mapRequestProps, true, false);
      Assert.assertEquals(State.INSTALLED,
-             clusters.getCluster(cluster1).getService(serviceName)
-                     .getDesiredState());
  
      // manually change live state to installed as no running action manager
      for (ServiceComponent sc :
-             clusters.getCluster(cluster1).getService(serviceName)
-                     .getServiceComponents().values()) {
-         for (ServiceComponentHost sch : sc.getServiceComponentHosts().values()) {
-             sch.setState(State.INSTALLED);
-         }
      }
  
      // Start
-     r = new ServiceRequest(cluster1, serviceName,
-             State.STARTED.toString());
      requests.clear();
      requests.add(r);
      ServiceResourceProviderTest.updateServices(controller, requests, mapRequestProps, true, false);
  
      // manually change live state to started as no running action manager
      for (ServiceComponent sc :
-             clusters.getCluster(cluster1).getService(serviceName)
-                     .getServiceComponents().values()) {
-         for (ServiceComponentHost sch : sc.getServiceComponentHosts().values()) {
-             sch.setState(State.STARTED);
-         }
      }
  
      Assert.assertEquals(State.STARTED,
-             clusters.getCluster(cluster1).getService(serviceName)
-                     .getDesiredState());
      for (ServiceComponent sc :
-             clusters.getCluster(cluster1).getService(serviceName)
-                     .getServiceComponents().values()) {
-         if (sc.getName().equals("HDFS_CLIENT")) {
-             Assert.assertEquals(State.INSTALLED, sc.getDesiredState());
          } else {
-             Assert.assertEquals(State.STARTED, sc.getDesiredState());
-         }
-         for (ServiceComponentHost sch : sc.getServiceComponentHosts().values()) {
-             if (sch.getServiceComponentName().equals("HDFS_CLIENT")) {
-                 Assert.assertEquals(State.INSTALLED, sch.getDesiredState());
-             } else {
-                 Assert.assertEquals(State.STARTED, sch.getDesiredState());
-             }
          }
      }
  
      Map<String, String> configs = new HashMap<>();
      configs.put("a", "b");
  
      ConfigurationRequest cr1, cr2, cr3, cr4, cr5, cr6, cr7, cr8;
-     cr1 = new ConfigurationRequest(cluster1, "typeA","v1", configs, null);
-     cr2 = new ConfigurationRequest(cluster1, "typeB","v1", configs, null);
-     cr3 = new ConfigurationRequest(cluster1, "typeC","v1", configs, null);
-     cr4 = new ConfigurationRequest(cluster1, "typeD","v1", configs, null);
-     cr5 = new ConfigurationRequest(cluster1, "typeA","v2", configs, null);
-     cr6 = new ConfigurationRequest(cluster1, "typeB","v2", configs, null);
-     cr7 = new ConfigurationRequest(cluster1, "typeC","v2", configs, null);
-     cr8 = new ConfigurationRequest(cluster1, "typeE","v1", configs, null);
      controller.createConfiguration(cr1);
      controller.createConfiguration(cr2);
      controller.createConfiguration(cr3);
--- 4655,4759 ----
  
      // null service should work
      createServiceComponentHost(cluster1, null, componentName1,
+       host1, null);
      createServiceComponentHost(cluster1, serviceName, componentName2,
+       host1, null);
      createServiceComponentHost(cluster1, serviceName, componentName2,
+       host2, null);
      createServiceComponentHost(cluster1, serviceName, componentName3,
+       host1, null);
      createServiceComponentHost(cluster1, serviceName, componentName3,
+       host2, null);
  
      Assert.assertNotNull(clusters.getCluster(cluster1)
+       .getService(serviceName)
+       .getServiceComponent(componentName1)
+       .getServiceComponentHost(host1));
      Assert.assertNotNull(clusters.getCluster(cluster1)
+       .getService(serviceName)
+       .getServiceComponent(componentName2)
+       .getServiceComponentHost(host1));
      Assert.assertNotNull(clusters.getCluster(cluster1)
+       .getService(serviceName)
+       .getServiceComponent(componentName2)
+       .getServiceComponentHost(host2));
      Assert.assertNotNull(clusters.getCluster(cluster1)
+       .getService(serviceName)
+       .getServiceComponent(componentName3)
+       .getServiceComponentHost(host1));
      Assert.assertNotNull(clusters.getCluster(cluster1)
+       .getService(serviceName)
+       .getServiceComponent(componentName3)
+       .getServiceComponentHost(host2));
  
      // Install
+     ServiceRequest r = new ServiceRequest((clusters.getCluster(cluster1)).getClusterId(), serviceName,
+       State.INSTALLED.toString());
      Set<ServiceRequest> requests = new HashSet<>();
      requests.add(r);
  
      ServiceResourceProviderTest.updateServices(controller, requests, mapRequestProps, true, false);
      Assert.assertEquals(State.INSTALLED,
+       clusters.getCluster(cluster1).getService(serviceName)
+         .getDesiredState());
  
      // manually change live state to installed as no running action manager
      for (ServiceComponent sc :
+       clusters.getCluster(cluster1).getService(serviceName)
+         .getServiceComponents().values()) {
+       for (ServiceComponentHost sch : sc.getServiceComponentHosts().values()) {
+         sch.setState(State.INSTALLED);
+       }
      }
  
      // Start
+     r = new ServiceRequest((clusters.getCluster(cluster1)).getClusterId(), serviceName,
+       State.STARTED.toString());
      requests.clear();
      requests.add(r);
      ServiceResourceProviderTest.updateServices(controller, requests, mapRequestProps, true, false);
  
      // manually change live state to started as no running action manager
      for (ServiceComponent sc :
+       clusters.getCluster(cluster1).getService(serviceName)
+         .getServiceComponents().values()) {
+       for (ServiceComponentHost sch : sc.getServiceComponentHosts().values()) {
+         sch.setState(State.STARTED);
+       }
      }
  
      Assert.assertEquals(State.STARTED,
+       clusters.getCluster(cluster1).getService(serviceName)
+         .getDesiredState());
      for (ServiceComponent sc :
+       clusters.getCluster(cluster1).getService(serviceName)
+         .getServiceComponents().values()) {
+       if (sc.getName().equals("HDFS_CLIENT")) {
+         Assert.assertEquals(State.INSTALLED, sc.getDesiredState());
+       } else {
+         Assert.assertEquals(State.STARTED, sc.getDesiredState());
+       }
+       for (ServiceComponentHost sch : sc.getServiceComponentHosts().values()) {
+         if (sch.getServiceComponentName().equals("HDFS_CLIENT")) {
+           Assert.assertEquals(State.INSTALLED, sch.getDesiredState());
          } else {
+           Assert.assertEquals(State.STARTED, sch.getDesiredState());
          }
+       }
      }
  
      Map<String, String> configs = new HashMap<>();
      configs.put("a", "b");
  
      ConfigurationRequest cr1, cr2, cr3, cr4, cr5, cr6, cr7, cr8;
+     cr1 = new ConfigurationRequest((clusters.getCluster(cluster1)).getClusterId(), "typeA","v1", configs, null);
+     cr2 = new ConfigurationRequest((clusters.getCluster(cluster1)).getClusterId(), "typeB","v1", configs, null);
+     cr3 = new ConfigurationRequest((clusters.getCluster(cluster1)).getClusterId(), "typeC","v1", configs, null);
+     cr4 = new ConfigurationRequest((clusters.getCluster(cluster1)).getClusterId(), "typeD","v1", configs, null);
+     cr5 = new ConfigurationRequest((clusters.getCluster(cluster1)).getClusterId(), "typeA","v2", configs, null);
+     cr6 = new ConfigurationRequest((clusters.getCluster(cluster1)).getClusterId(), "typeB","v2", configs, null);
+     cr7 = new ConfigurationRequest((clusters.getCluster(cluster1)).getClusterId(), "typeC","v2", configs, null);
+     cr8 = new ConfigurationRequest((clusters.getCluster(cluster1)).getClusterId(), "typeE","v1", configs, null);
      controller.createConfiguration(cr1);
      controller.createConfiguration(cr2);
      controller.createConfiguration(cr3);
***************
*** 4793,4799 ****
      configVersions.put("typeC", "v2");
      configVersions.put("typeE", "v1");
      sReqs.clear();
-     sReqs.add(new ServiceRequest(cluster1, serviceName, null));
      Assert.assertNull(ServiceResourceProviderTest.updateServices(controller, sReqs, mapRequestProps, true, false));
  
  
--- 4799,4805 ----
      configVersions.put("typeC", "v2");
      configVersions.put("typeE", "v1");
      sReqs.clear();
+     sReqs.add(new ServiceRequest((clusters.getCluster(cluster1)).getClusterId(), serviceName, null));
      Assert.assertNull(ServiceResourceProviderTest.updateServices(controller, sReqs, mapRequestProps, true, false));
  
  
***************
*** 4942,4948 ****
      configVersions.put("typeC", "v2");
      configVersions.put("typeE", "v1");
      sReqs.clear();
-     sReqs.add(new ServiceRequest(cluster1, serviceName, null));
      Assert.assertNull(ServiceResourceProviderTest.updateServices(controller, sReqs, mapRequestProps, true, false));
  
      // update configs at SCH level
--- 4948,4954 ----
      configVersions.put("typeC", "v2");
      configVersions.put("typeE", "v1");
      sReqs.clear();
+     sReqs.add(new ServiceRequest((clusters.getCluster(cluster1)).getClusterId(), serviceName, null));
      Assert.assertNull(ServiceResourceProviderTest.updateServices(controller, sReqs, mapRequestProps, true, false));
  
      // update configs at SCH level
***************
*** 5008,5014 ****
        host2, null);
  
      // Install
-     ServiceRequest r = new ServiceRequest(cluster1, serviceName,
        State.INSTALLED.toString());
      Set<ServiceRequest> requests = new HashSet<>();
      requests.add(r);
--- 5014,5020 ----
        host2, null);
  
      // Install
+     ServiceRequest r = new ServiceRequest((clusters.getCluster(cluster1)).getClusterId(), serviceName,
        State.INSTALLED.toString());
      Set<ServiceRequest> requests = new HashSet<>();
      requests.add(r);
***************
*** 5108,5114 ****
      configVersions.put("core-site", "version1");
      configVersions.put("hdfs-site", "version1");
      sReqs.clear();
-     sReqs.add(new ServiceRequest(cluster1, serviceName, null));
      Assert.assertNull(ServiceResourceProviderTest.updateServices(controller, sReqs, mapRequestProps, true, false));
  
      // Reconfigure S Level
--- 5114,5120 ----
      configVersions.put("core-site", "version1");
      configVersions.put("hdfs-site", "version1");
      sReqs.clear();
+     sReqs.add(new ServiceRequest((clusters.getCluster(cluster1)).getClusterId(), serviceName, null));
      Assert.assertNull(ServiceResourceProviderTest.updateServices(controller, sReqs, mapRequestProps, true, false));
  
      // Reconfigure S Level
***************
*** 5116,5122 ****
      configVersions.put("core-site", "version122");
  
      sReqs.clear();
-     sReqs.add(new ServiceRequest(cluster1, serviceName, null));
      Assert.assertNull(ServiceResourceProviderTest.updateServices(controller, sReqs, mapRequestProps, true, false));
  
      entityManager.clear();
--- 5122,5128 ----
      configVersions.put("core-site", "version122");
  
      sReqs.clear();
+     sReqs.add(new ServiceRequest((clusters.getCluster(cluster1)).getClusterId(), serviceName, null));
      Assert.assertNull(ServiceResourceProviderTest.updateServices(controller, sReqs, mapRequestProps, true, false));
  
      entityManager.clear();
***************
*** 5410,5421 ****
      String cluster1 = getUniqueName();
      createCluster(cluster1);
      clusters.getCluster(cluster1)
-         .setDesiredStackVersion(new StackId("HDP-0.1"));
      String serviceName = "PIG";
      createService(cluster1, serviceName, null);
      String componentName1 = "PIG";
      createServiceComponent(cluster1, serviceName, componentName1,
-         State.INIT);
  
      String host1 = getUniqueName();
      String host2 = getUniqueName();
--- 5416,5427 ----
      String cluster1 = getUniqueName();
      createCluster(cluster1);
      clusters.getCluster(cluster1)
+       .setDesiredStackVersion(new StackId("HDP-0.1"));
      String serviceName = "PIG";
      createService(cluster1, serviceName, null);
      String componentName1 = "PIG";
      createServiceComponent(cluster1, serviceName, componentName1,
+       State.INIT);
  
      String host1 = getUniqueName();
      String host2 = getUniqueName();
***************
*** 5428,5449 ****
  
      // null service should work
      createServiceComponentHost(cluster1, null, componentName1,
-         host1, null);
      createServiceComponentHost(cluster1, null, componentName1,
-         host2, null);
  
-     ServiceRequest r = new ServiceRequest(cluster1, serviceName, State.INSTALLED.toString());
      Set<ServiceRequest> requests = new HashSet<>();
      requests.add(r);
  
      RequestStatusResponse trackAction =
-         ServiceResourceProviderTest.updateServices(controller, requests, mapRequestProps, true, false);
      Assert.assertEquals(State.INSTALLED,
-         clusters.getCluster(cluster1).getService(serviceName)
          .getDesiredState());
      for (ServiceComponent sc :
        clusters.getCluster(cluster1).getService(serviceName)
-       .getServiceComponents().values()) {
        Assert.assertEquals(State.INSTALLED, sc.getDesiredState());
        Assert.assertFalse(sc.isRecoveryEnabled()); // default value of recoveryEnabled
        for (ServiceComponentHost sch : sc.getServiceComponentHosts().values()) {
--- 5434,5455 ----
  
      // null service should work
      createServiceComponentHost(cluster1, null, componentName1,
+       host1, null);
      createServiceComponentHost(cluster1, null, componentName1,
+       host2, null);
  
+     ServiceRequest r = new ServiceRequest((clusters.getCluster(cluster1)).getClusterId(), serviceName, State.INSTALLED.toString());
      Set<ServiceRequest> requests = new HashSet<>();
      requests.add(r);
  
      RequestStatusResponse trackAction =
+       ServiceResourceProviderTest.updateServices(controller, requests, mapRequestProps, true, false);
      Assert.assertEquals(State.INSTALLED,
+       clusters.getCluster(cluster1).getService(serviceName)
          .getDesiredState());
      for (ServiceComponent sc :
        clusters.getCluster(cluster1).getService(serviceName)
+         .getServiceComponents().values()) {
        Assert.assertEquals(State.INSTALLED, sc.getDesiredState());
        Assert.assertFalse(sc.isRecoveryEnabled()); // default value of recoveryEnabled
        for (ServiceComponentHost sch : sc.getServiceComponentHosts().values()) {
***************
*** 5461,5474 ****
  
      for (ServiceComponent sc :
        clusters.getCluster(cluster1).getService(serviceName)
-           .getServiceComponents().values()) {
        sc.setRecoveryEnabled(true);
        for (ServiceComponentHost sch : sc.getServiceComponentHosts().values()) {
          sch.setState(State.INSTALLED);
        }
      }
  
-     r = new ServiceRequest(cluster1, serviceName, State.STARTED.toString());
      requests.clear();
      requests.add(r);
  
--- 5467,5480 ----
  
      for (ServiceComponent sc :
        clusters.getCluster(cluster1).getService(serviceName)
+         .getServiceComponents().values()) {
        sc.setRecoveryEnabled(true);
        for (ServiceComponentHost sch : sc.getServiceComponentHosts().values()) {
          sch.setState(State.INSTALLED);
        }
      }
  
+     r = new ServiceRequest((clusters.getCluster(cluster1)).getClusterId(), serviceName, State.STARTED.toString());
      requests.clear();
      requests.add(r);
  
***************
*** 5890,5896 ****
  
      // Start Service
      ServiceRequest sr = new ServiceRequest(
-       cluster1, serviceName, State.STARTED.name());
      Set<ServiceRequest> setReqs = new HashSet<>();
      setReqs.add(sr);
      RequestStatusResponse resp = ServiceResourceProviderTest.updateServices(controller,
--- 5896,5902 ----
  
      // Start Service
      ServiceRequest sr = new ServiceRequest(
+       (clusters.getCluster(cluster1)).getClusterId(), serviceName, State.STARTED.name());
      Set<ServiceRequest> setReqs = new HashSet<>();
      setReqs.add(sr);
      RequestStatusResponse resp = ServiceResourceProviderTest.updateServices(controller,
***************
*** 6493,6499 ****
        put("core-site", "version1");
        put("hdfs-site", "version1");
      }};
-     ServiceRequest sr = new ServiceRequest(cluster1, serviceName, null);
      ServiceResourceProviderTest.updateServices(controller, Collections.singleton(sr), new HashMap<String,String>(), false, false);
  
      // Install
--- 6499,6505 ----
        put("core-site", "version1");
        put("hdfs-site", "version1");
      }};
+     ServiceRequest sr = new ServiceRequest((clusters.getCluster(cluster1)).getClusterId(), serviceName, null);
      ServiceResourceProviderTest.updateServices(controller, Collections.singleton(sr), new HashMap<String,String>(), false, false);
  
      // Install
***************
*** 6546,6552 ****
  
  
  
-     ServiceRequest r = new ServiceRequest(cluster1, serviceName, State.INSTALLED.toString());
      Set<ServiceRequest> requests = new HashSet<>();
      requests.add(r);
  
--- 6552,6558 ----
  
  
  
+     ServiceRequest r = new ServiceRequest((clusters.getCluster(cluster1)).getClusterId(), serviceName, State.INSTALLED.toString());
      Set<ServiceRequest> requests = new HashSet<>();
      requests.add(r);
  
***************
*** 6623,6633 ****
      configs.put("a", "b");
  
      ConfigurationRequest cr1,cr2,cr3;
-     cr1 = new ConfigurationRequest(cluster1, "core-site","version1",
        configs, null);
-     cr2 = new ConfigurationRequest(cluster1, "hdfs-site","version1",
        configs, null);
-     cr3 = new ConfigurationRequest(cluster1, "mapred-site","version1",
        configs, null);
  
      ClusterRequest crReq = new ClusterRequest(cluster.getClusterId(), cluster1, null, null);
--- 6629,6639 ----
      configs.put("a", "b");
  
      ConfigurationRequest cr1,cr2,cr3;
+     cr1 = new ConfigurationRequest((clusters.getCluster(cluster1)).getClusterId(), "core-site","version1",
        configs, null);
+     cr2 = new ConfigurationRequest((clusters.getCluster(cluster1)).getClusterId(), "hdfs-site","version1",
        configs, null);
+     cr3 = new ConfigurationRequest((clusters.getCluster(cluster1)).getClusterId(), "mapred-site","version1",
        configs, null);
  
      ClusterRequest crReq = new ClusterRequest(cluster.getClusterId(), cluster1, null, null);
***************
*** 6794,6806 ****
      ConfigFactory configFactory = injector.getInstance(ConfigFactory.class);
      final Config config = configFactory.createReadOnly("hdfs-site", "version122", configs, null);
      Long groupId = createConfigGroup(clusters.getCluster(cluster1), group1, tag1,
-         new ArrayList<String>() {{
-           add(host1);
-           add(host2);
-         }},
-         new ArrayList<Config>() {{
-           add(config);
-         }}
      );
  
      Assert.assertNotNull(groupId);
--- 6800,6812 ----
      ConfigFactory configFactory = injector.getInstance(ConfigFactory.class);
      final Config config = configFactory.createReadOnly("hdfs-site", "version122", configs, null);
      Long groupId = createConfigGroup(clusters.getCluster(cluster1), group1, tag1,
+       new ArrayList<String>() {{
+         add(host1);
+         add(host2);
+       }},
+       new ArrayList<Config>() {{
+         add(config);
+       }}
      );
  
      Assert.assertNotNull(groupId);
***************
*** 7349,7372 ****
      addHostToCluster(host2, cluster1);
  
      createServiceComponentHost(cluster1, null, componentName,
-         host1, null);
      createServiceComponentHost(cluster1, null, componentName,
-         host2, null);
  
      c.getService(serviceName).setDesiredState(State.INSTALLED);
      c.getService(serviceName).getServiceComponent(componentName).setDesiredState(State.INSTALLED);
      c.getService(serviceName).getServiceComponent(componentName).getServiceComponentHost(host1)
-         .setDesiredState(State.INSTALLED);
      c.getService(serviceName).getServiceComponent(componentName).getServiceComponentHost(host2)
-         .setDesiredState(State.STARTED);
      c.getService(serviceName).getServiceComponent(componentName).getServiceComponentHost(host1)
-         .setState(State.INSTALLED);
      c.getService(serviceName).getServiceComponent(componentName).getServiceComponentHost(host2)
-         .setState(State.STARTED);
      c.getService(serviceName).getServiceComponent(componentName).getServiceComponentHost(host1)
-         .setStackVersion(currentStackId);
      c.getService(serviceName).getServiceComponent(componentName).getServiceComponentHost(host2)
-         .setStackVersion(currentStackId);
  
      ClusterRequest r = new ClusterRequest(c.getClusterId(), cluster1, "HDP-0.0.1", null);
      try {
--- 7355,7378 ----
      addHostToCluster(host2, cluster1);
  
      createServiceComponentHost(cluster1, null, componentName,
+       host1, null);
      createServiceComponentHost(cluster1, null, componentName,
+       host2, null);
  
      c.getService(serviceName).setDesiredState(State.INSTALLED);
      c.getService(serviceName).getServiceComponent(componentName).setDesiredState(State.INSTALLED);
      c.getService(serviceName).getServiceComponent(componentName).getServiceComponentHost(host1)
+       .setDesiredState(State.INSTALLED);
      c.getService(serviceName).getServiceComponent(componentName).getServiceComponentHost(host2)
+       .setDesiredState(State.STARTED);
      c.getService(serviceName).getServiceComponent(componentName).getServiceComponentHost(host1)
+       .setState(State.INSTALLED);
      c.getService(serviceName).getServiceComponent(componentName).getServiceComponentHost(host2)
+       .setState(State.STARTED);
      c.getService(serviceName).getServiceComponent(componentName).getServiceComponentHost(host1)
+       .setStackVersion(currentStackId);
      c.getService(serviceName).getServiceComponent(componentName).getServiceComponentHost(host2)
+       .setStackVersion(currentStackId);
  
      ClusterRequest r = new ClusterRequest(c.getClusterId(), cluster1, "HDP-0.0.1", null);
      try {
***************
*** 7394,7400 ****
      }
  
      c.getService(serviceName).getServiceComponent(componentName).getServiceComponentHost(host2)
-         .setDesiredState(State.INSTALLED);
  
      r = new ClusterRequest(c.getClusterId(), cluster1, "HDP-0.2", null);
      try {
--- 7400,7406 ----
      }
  
      c.getService(serviceName).getServiceComponent(componentName).getServiceComponentHost(host2)
+       .setDesiredState(State.INSTALLED);
  
      r = new ClusterRequest(c.getClusterId(), cluster1, "HDP-0.2", null);
      try {
***************
*** 7406,7426 ****
      }
  
      c.getService(serviceName).getServiceComponent(componentName).getServiceComponentHost(host2)
-         .setState(State.INSTALLED);
      controller.updateClusters(Collections.singleton(r), mapRequestProps);
      StackId expectedStackId = new StackId("HDP-0.2");
      Assert.assertTrue(expectedStackId.equals(c.getDesiredStackVersion()));
      Assert.assertTrue(expectedStackId.equals(c.getService(serviceName).getDesiredStackVersion()));
      Assert.assertTrue(expectedStackId.equals(c.getService(serviceName)
-         .getServiceComponent(componentName).getDesiredStackVersion()));
      Assert.assertTrue(expectedStackId.equals(c.getService(serviceName)
-         .getServiceComponent(componentName).getServiceComponentHost(host1).getDesiredStackVersion()));
      Assert.assertTrue(expectedStackId.equals(c.getService(serviceName)
-         .getServiceComponent(componentName).getServiceComponentHost(host2).getDesiredStackVersion()));
      Assert.assertTrue(currentStackId.equals(c.getService(serviceName)
-         .getServiceComponent(componentName).getServiceComponentHost(host1).getStackVersion()));
      Assert.assertTrue(currentStackId.equals(c.getService(serviceName)
-         .getServiceComponent(componentName).getServiceComponentHost(host2).getStackVersion()));
      ServiceComponent sc = c.getService(serviceName).getServiceComponent(componentName);
      Assert.assertEquals(State.UPGRADING, sc.getServiceComponentHost(host1).getState());
      Assert.assertEquals(State.UPGRADING, sc.getServiceComponentHost(host2).getState());
--- 7412,7432 ----
      }
  
      c.getService(serviceName).getServiceComponent(componentName).getServiceComponentHost(host2)
+       .setState(State.INSTALLED);
      controller.updateClusters(Collections.singleton(r), mapRequestProps);
      StackId expectedStackId = new StackId("HDP-0.2");
      Assert.assertTrue(expectedStackId.equals(c.getDesiredStackVersion()));
      Assert.assertTrue(expectedStackId.equals(c.getService(serviceName).getDesiredStackVersion()));
      Assert.assertTrue(expectedStackId.equals(c.getService(serviceName)
+       .getServiceComponent(componentName).getDesiredStackVersion()));
      Assert.assertTrue(expectedStackId.equals(c.getService(serviceName)
+       .getServiceComponent(componentName).getServiceComponentHost(host1).getDesiredStackVersion()));
      Assert.assertTrue(expectedStackId.equals(c.getService(serviceName)
+       .getServiceComponent(componentName).getServiceComponentHost(host2).getDesiredStackVersion()));
      Assert.assertTrue(currentStackId.equals(c.getService(serviceName)
+       .getServiceComponent(componentName).getServiceComponentHost(host1).getStackVersion()));
      Assert.assertTrue(currentStackId.equals(c.getService(serviceName)
+       .getServiceComponent(componentName).getServiceComponentHost(host2).getStackVersion()));
      ServiceComponent sc = c.getService(serviceName).getServiceComponent(componentName);
      Assert.assertEquals(State.UPGRADING, sc.getServiceComponentHost(host1).getState());
      Assert.assertEquals(State.UPGRADING, sc.getServiceComponentHost(host2).getState());
***************
*** 7435,7447 ****
  
      // cases where there is no update required
      c.getService(serviceName).getServiceComponent(componentName).getServiceComponentHost(host1)
-         .setDesiredState(State.INSTALLED);
      c.getService(serviceName).getServiceComponent(componentName).getServiceComponentHost(host2)
-         .setDesiredState(State.INSTALLED);
      c.getService(serviceName).getServiceComponent(componentName).getServiceComponentHost(host1)
-         .setState(State.INSTALLED);
      c.getService(serviceName).getServiceComponent(componentName).getServiceComponentHost(host2)
-         .setState(State.INSTALLED);
      c.setCurrentStackVersion(expectedStackId);
      r = new ClusterRequest(c.getClusterId(), cluster1, "", null);
      controller.updateClusters(Collections.singleton(r), mapRequestProps);
--- 7441,7453 ----
  
      // cases where there is no update required
      c.getService(serviceName).getServiceComponent(componentName).getServiceComponentHost(host1)
+       .setDesiredState(State.INSTALLED);
      c.getService(serviceName).getServiceComponent(componentName).getServiceComponentHost(host2)
+       .setDesiredState(State.INSTALLED);
      c.getService(serviceName).getServiceComponent(componentName).getServiceComponentHost(host1)
+       .setState(State.INSTALLED);
      c.getService(serviceName).getServiceComponent(componentName).getServiceComponentHost(host2)
+       .setState(State.INSTALLED);
      c.setCurrentStackVersion(expectedStackId);
      r = new ClusterRequest(c.getClusterId(), cluster1, "", null);
      controller.updateClusters(Collections.singleton(r), mapRequestProps);
***************
*** 7526,7534 ****
      addHostToCluster(host2, cluster1);
  
      createServiceComponentHost(cluster1, null, pigComponentName,
-         host1, null);
      createServiceComponentHost(cluster1, null, pigComponentName,
-         host2, null);
  
      resetServiceState(pigServiceName, currentStackId, c);
  
--- 7532,7540 ----
      addHostToCluster(host2, cluster1);
  
      createServiceComponentHost(cluster1, null, pigComponentName,
+       host1, null);
      createServiceComponentHost(cluster1, null, pigComponentName,
+       host2, null);
  
      resetServiceState(pigServiceName, currentStackId, c);
  
***************
*** 7575,7587 ****
  
      // some host components are upgraded
      c.getService(pigServiceName).getServiceComponent(pigComponentName).getServiceComponentHost(host1)
-         .setState(State.INSTALLED);
      c.getService(pigServiceName).getServiceComponent(pigComponentName).getServiceComponentHost(host2)
-         .setState(State.INSTALLED);
      c.getService(pigServiceName).getServiceComponent(pigComponentName).getServiceComponentHost(host1)
-         .setStackVersion(desiredStackId);
      c.getService(pigServiceName).getServiceComponent(pigComponentName).getServiceComponentHost(host2)
-         .setStackVersion(desiredStackId);
  
      actionDB.abortOperation(trackAction.getRequestId());
      trackAction = controller.updateClusters(Collections.singleton(r), mapRequestProps);
--- 7581,7593 ----
  
      // some host components are upgraded
      c.getService(pigServiceName).getServiceComponent(pigComponentName).getServiceComponentHost(host1)
+       .setState(State.INSTALLED);
      c.getService(pigServiceName).getServiceComponent(pigComponentName).getServiceComponentHost(host2)
+       .setState(State.INSTALLED);
      c.getService(pigServiceName).getServiceComponent(pigComponentName).getServiceComponentHost(host1)
+       .setStackVersion(desiredStackId);
      c.getService(pigServiceName).getServiceComponent(pigComponentName).getServiceComponentHost(host2)
+       .setStackVersion(desiredStackId);
  
      actionDB.abortOperation(trackAction.getRequestId());
      trackAction = controller.updateClusters(Collections.singleton(r), mapRequestProps);
***************
*** 7589,7597 ****
      validateGeneratedStages(stages, 5, expectedTasks);
  
      c.getService(mrServiceName).getServiceComponent(mrJobTrackerComp).getServiceComponentHost(host1)
-         .setState(State.UPGRADING);
      c.getService(mrServiceName).getServiceComponent(mrTaskTrackerComp).getServiceComponentHost(host2)
-         .setState(State.UPGRADING);
      actionDB.abortOperation(trackAction.getRequestId());
      trackAction = controller.updateClusters(Collections.singleton(r), mapRequestProps);
      stages = actionDB.getAllStages(trackAction.getRequestId());
--- 7595,7603 ----
      validateGeneratedStages(stages, 5, expectedTasks);
  
      c.getService(mrServiceName).getServiceComponent(mrJobTrackerComp).getServiceComponentHost(host1)
+       .setState(State.UPGRADING);
      c.getService(mrServiceName).getServiceComponent(mrTaskTrackerComp).getServiceComponentHost(host2)
+       .setState(State.UPGRADING);
      actionDB.abortOperation(trackAction.getRequestId());
      trackAction = controller.updateClusters(Collections.singleton(r), mapRequestProps);
      stages = actionDB.getAllStages(trackAction.getRequestId());
***************
*** 7550,7556 ****
        .getServiceComponentHost(host2));
  
      // Install
-     ServiceRequest r = new ServiceRequest(cluster1, serviceName, State.INSTALLED.toString());
      Set<ServiceRequest> requests = new HashSet<>();
      requests.add(r);
  
--- 7556,7562 ----
        .getServiceComponentHost(host2));
  
      // Install
+     ServiceRequest r = new ServiceRequest((clusters.getCluster(cluster1)).getClusterId(), serviceName, State.INSTALLED.toString());
      Set<ServiceRequest> requests = new HashSet<>();
      requests.add(r);
  
***************
*** 7569,7575 ****
      }
  
      // Start
-     r = new ServiceRequest(cluster1, serviceName, State.STARTED.toString());
      requests.clear();
      requests.add(r);
      ServiceResourceProviderTest.updateServices(controller, requests, mapRequestProps, true, false);
--- 7575,7581 ----
      }
  
      // Start
+     r = new ServiceRequest((clusters.getCluster(cluster1)).getClusterId(), serviceName, State.STARTED.toString());
      requests.clear();
      requests.add(r);
      ServiceResourceProviderTest.updateServices(controller, requests, mapRequestProps, true, false);
***************
*** 7600,7606 ****
      }
  
      // Stop all services
-     r = new ServiceRequest(cluster1, serviceName, State.INSTALLED.toString());
      requests.clear();
      requests.add(r);
      ServiceResourceProviderTest.updateServices(controller, requests, mapRequestProps, true, false);
--- 7606,7612 ----
      }
  
      // Stop all services
+     r = new ServiceRequest((clusters.getCluster(cluster1)).getClusterId(), serviceName, State.INSTALLED.toString());
      requests.clear();
      requests.add(r);
      ServiceResourceProviderTest.updateServices(controller, requests, mapRequestProps, true, false);
***************
*** 7635,7673 ****
  
      helper.getOrCreateRepositoryVersion(stackID, stackID.getStackVersion());
      c.createClusterVersion(stackID, stackID.getStackVersion(), "admin",
-         RepositoryVersionState.INSTALLING);
      clusters.addHost(hostName1);
      setOsFamily(clusters.getHost(hostName1), "redhat", "5.9");
  
      clusters.mapAndPublishHostsToCluster(new HashSet<String>(){
-       {add(hostName1);}}, cluster1);
  
  
      List<Stage> stages = new ArrayList<>();
      stages.add(stageFactory.createNew(requestId1, "/a1", cluster1, clusterId, context,
-         "", ""));
      stages.get(0).setStageId(1);
      stages.get(0).addHostRoleExecutionCommand(hostName1, Role.HBASE_MASTER,
-             RoleCommand.START,
-             new ServiceComponentHostStartEvent(Role.HBASE_MASTER.toString(),
-                     hostName1, System.currentTimeMillis()),
-             cluster1, "HBASE", false, false);
  
      stages.add(stageFactory.createNew(requestId1, "/a2", cluster1, clusterId, context,
        "", ""));
      stages.get(1).setStageId(2);
      stages.get(1).addHostRoleExecutionCommand(hostName1, Role.HBASE_CLIENT,
-             RoleCommand.START,
-             new ServiceComponentHostStartEvent(Role.HBASE_CLIENT.toString(),
-                     hostName1, System.currentTimeMillis()), cluster1, "HBASE", false, false);
  
      stages.add(stageFactory.createNew(requestId1, "/a3", cluster1, clusterId, context,
        "", ""));
      stages.get(2).setStageId(3);
      stages.get(2).addHostRoleExecutionCommand(hostName1, Role.HBASE_CLIENT,
-             RoleCommand.START,
-             new ServiceComponentHostStartEvent(Role.HBASE_CLIENT.toString(),
-                     hostName1, System.currentTimeMillis()), cluster1, "HBASE", false, false);
  
      Request request = new Request(stages, "", clusters);
      actionDB.persistActions(request);
--- 7641,7679 ----
  
      helper.getOrCreateRepositoryVersion(stackID, stackID.getStackVersion());
      c.createClusterVersion(stackID, stackID.getStackVersion(), "admin",
+       RepositoryVersionState.INSTALLING);
      clusters.addHost(hostName1);
      setOsFamily(clusters.getHost(hostName1), "redhat", "5.9");
  
      clusters.mapAndPublishHostsToCluster(new HashSet<String>(){
+       {add(hostName1);}}, (clusters.getCluster(cluster1)).getClusterId());
  
  
      List<Stage> stages = new ArrayList<>();
      stages.add(stageFactory.createNew(requestId1, "/a1", cluster1, clusterId, context,
+       "", ""));
      stages.get(0).setStageId(1);
      stages.get(0).addHostRoleExecutionCommand(hostName1, Role.HBASE_MASTER,
+       RoleCommand.START,
+       new ServiceComponentHostStartEvent(Role.HBASE_MASTER.toString(),
+         hostName1, System.currentTimeMillis()),
+       (clusters.getCluster(cluster1)).getClusterId(), "HBASE", false, false);
  
      stages.add(stageFactory.createNew(requestId1, "/a2", cluster1, clusterId, context,
        "", ""));
      stages.get(1).setStageId(2);
      stages.get(1).addHostRoleExecutionCommand(hostName1, Role.HBASE_CLIENT,
+       RoleCommand.START,
+       new ServiceComponentHostStartEvent(Role.HBASE_CLIENT.toString(),
+         hostName1, System.currentTimeMillis()), (clusters.getCluster(cluster1)).getClusterId(), "HBASE", false, false);
  
      stages.add(stageFactory.createNew(requestId1, "/a3", cluster1, clusterId, context,
        "", ""));
      stages.get(2).setStageId(3);
      stages.get(2).addHostRoleExecutionCommand(hostName1, Role.HBASE_CLIENT,
+       RoleCommand.START,
+       new ServiceComponentHostStartEvent(Role.HBASE_CLIENT.toString(),
+         hostName1, System.currentTimeMillis()), (clusters.getCluster(cluster1)).getClusterId(), "HBASE", false, false);
  
      Request request = new Request(stages, "", clusters);
      actionDB.persistActions(request);
***************
*** 7800,7806 ****
  
  
      // Install
-     ServiceRequest r = new ServiceRequest(cluster1, serviceName, State.INSTALLED.toString());
      Set<ServiceRequest> requests = new HashSet<>();
      requests.add(r);
  
--- 7806,7812 ----
  
  
      // Install
+     ServiceRequest r = new ServiceRequest((clusters.getCluster(cluster1)).getClusterId(), serviceName, State.INSTALLED.toString());
      Set<ServiceRequest> requests = new HashSet<>();
      requests.add(r);
  
***************
*** 7898,7905 ****
      sch3.setState(State.INSTALLED);
  
      // an UNKOWN failure will throw an exception
-     ServiceRequest req = new ServiceRequest(cluster1, serviceName1,
-         State.INSTALLED.toString());
      ServiceResourceProviderTest.updateServices(controller, Collections.singleton(req), Collections.<String, String>emptyMap(), true, false);
    }
  
--- 7904,7911 ----
      sch3.setState(State.INSTALLED);
  
      // an UNKOWN failure will throw an exception
+     ServiceRequest req = new ServiceRequest((clusters.getCluster(cluster1)).getClusterId(), serviceName1,
+       State.INSTALLED.toString());
      ServiceResourceProviderTest.updateServices(controller, Collections.singleton(req), Collections.<String, String>emptyMap(), true, false);
    }
  
***************
*** 8053,8059 ****
      // Case 1: Attempt delete when components still exist
      Set<HostRequest> requests = new HashSet<>();
      requests.clear();
-     requests.add(new HostRequest(host1, cluster1, null));
      try {
        HostResourceProviderTest.deleteHosts(controller, requests, false, false);
        fail("Expect failure deleting hosts when components exist and have not been deleted.");
--- 8059,8065 ----
      // Case 1: Attempt delete when components still exist
      Set<HostRequest> requests = new HashSet<>();
      requests.clear();
+     requests.add(new HostRequest(host1, (clusters.getCluster(cluster1)).getClusterId(), null));
      try {
        HostResourceProviderTest.deleteHosts(controller, requests, false, false);
        fail("Expect failure deleting hosts when components exist and have not been deleted.");
***************
*** 8162,8168 ****
      // Case 1: Attempt delete when components still exist
      Set<HostRequest> requests = new HashSet<>();
      requests.clear();
-     requests.add(new HostRequest(host1, cluster1, null));
      try {
        HostResourceProviderTest.deleteHosts(controller, requests);
        fail("Expect failure deleting hosts when components exist and have not been deleted.");
--- 8168,8174 ----
      // Case 1: Attempt delete when components still exist
      Set<HostRequest> requests = new HashSet<>();
      requests.clear();
+     requests.add(new HostRequest(host1, (clusters.getCluster(cluster1)).getClusterId(), null));
      try {
        HostResourceProviderTest.deleteHosts(controller, requests);
        fail("Expect failure deleting hosts when components exist and have not been deleted.");
***************
*** 8208,8214 ****
  
      // Case 3: Delete host that is still part of the cluster, and specify the cluster_name in the request
      requests.clear();
-     requests.add(new HostRequest(host2, cluster1, null));
      try {
        HostResourceProviderTest.deleteHosts(controller, requests);
      } catch (Exception e) {
--- 8214,8220 ----
  
      // Case 3: Delete host that is still part of the cluster, and specify the cluster_name in the request
      requests.clear();
+     requests.add(new HostRequest(host2, (clusters.getCluster(cluster1)).getClusterId(), null));
      try {
        HostResourceProviderTest.deleteHosts(controller, requests);
      } catch (Exception e) {
***************
*** 8425,8439 ****
        amc.createCluster(clusterRequest);
  
        Set<ServiceRequest> serviceRequests = new HashSet<>();
-       serviceRequests.add(new ServiceRequest(cluster1, "HDFS", null));
  
        ServiceResourceProviderTest.createServices(amc, serviceRequests);
  
        Type confType = new TypeToken<Map<String, String>>() {
        }.getType();
  
-       ConfigurationRequest configurationRequest = new ConfigurationRequest(cluster1, type, tag,
-           gson.<Map<String, String>>fromJson("{ \"fs.default.name\" : \"localhost:8020\"}", confType), null);
        amc.createConfiguration(configurationRequest);
  
        amc.createConfiguration(configurationRequest);
--- 8431,8445 ----
        amc.createCluster(clusterRequest);
  
        Set<ServiceRequest> serviceRequests = new HashSet<>();
+       serviceRequests.add(new ServiceRequest((clusters.getCluster(cluster1)).getClusterId(), "HDFS", null));
  
        ServiceResourceProviderTest.createServices(amc, serviceRequests);
  
        Type confType = new TypeToken<Map<String, String>>() {
        }.getType();
  
+       ConfigurationRequest configurationRequest = new ConfigurationRequest((clusters.getCluster(cluster1)).getClusterId(), type, tag,
+         gson.<Map<String, String>>fromJson("{ \"fs.default.name\" : \"localhost:8020\"}", confType), null);
        amc.createConfiguration(configurationRequest);
  
        amc.createConfiguration(configurationRequest);
***************
*** 8474,8521 ****
  
      Long CLUSTER_ID = clusters.getCluster(CLUSTER_NAME).getClusterId();
  
-     ConfigurationRequest configRequest = new ConfigurationRequest(CLUSTER_NAME, "global", "version1",
-         new HashMap<String, String>() {{ put("a", "b"); }}, null);
      cr.setDesiredConfig(Collections.singletonList(configRequest));
      cr.setClusterId(CLUSTER_ID);
      amc.updateClusters(Collections.singleton(cr), new HashMap<String, String>());
  
      // add some hosts
      Set<HostRequest> hrs = new HashSet<>();
-     hrs.add(new HostRequest(HOST1, CLUSTER_NAME, null));
      HostResourceProviderTest.createHosts(amc, hrs);
  
      Set<ServiceRequest> serviceRequests = new HashSet<>();
-     serviceRequests.add(new ServiceRequest(CLUSTER_NAME, "HDFS", null));
-     serviceRequests.add(new ServiceRequest(CLUSTER_NAME, "MAPREDUCE2", null));
-     serviceRequests.add(new ServiceRequest(CLUSTER_NAME, "YARN", null));
  
      ServiceResourceProviderTest.createServices(amc, serviceRequests);
  
      Set<ServiceComponentRequest> serviceComponentRequests = new HashSet<>();
-     serviceComponentRequests.add(new ServiceComponentRequest(CLUSTER_NAME, "HDFS", "NAMENODE", null));
-     serviceComponentRequests.add(new ServiceComponentRequest(CLUSTER_NAME, "HDFS", "SECONDARY_NAMENODE", null));
-     serviceComponentRequests.add(new ServiceComponentRequest(CLUSTER_NAME, "HDFS", "DATANODE", null));
-     serviceComponentRequests.add(new ServiceComponentRequest(CLUSTER_NAME, "MAPREDUCE2", "HISTORYSERVER", null));
-     serviceComponentRequests.add(new ServiceComponentRequest(CLUSTER_NAME, "YARN", "RESOURCEMANAGER", null));
-     serviceComponentRequests.add(new ServiceComponentRequest(CLUSTER_NAME, "YARN", "NODEMANAGER", null));
-     serviceComponentRequests.add(new ServiceComponentRequest(CLUSTER_NAME, "HDFS", "HDFS_CLIENT", null));
  
      ComponentResourceProviderTest.createComponents(amc, serviceComponentRequests);
  
      Set<ServiceComponentHostRequest> componentHostRequests = new HashSet<>();
-     componentHostRequests.add(new ServiceComponentHostRequest(CLUSTER_NAME, "HDFS", "DATANODE", HOST1, null));
-     componentHostRequests.add(new ServiceComponentHostRequest(CLUSTER_NAME, "HDFS", "NAMENODE", HOST1, null));
-     componentHostRequests.add(new ServiceComponentHostRequest(CLUSTER_NAME, "HDFS", "SECONDARY_NAMENODE", HOST1, null));
-     componentHostRequests.add(new ServiceComponentHostRequest(CLUSTER_NAME, "MAPREDUCE2", "HISTORYSERVER", HOST1, null));
-     componentHostRequests.add(new ServiceComponentHostRequest(CLUSTER_NAME, "YARN", "RESOURCEMANAGER", HOST1, null));
-     componentHostRequests.add(new ServiceComponentHostRequest(CLUSTER_NAME, "YARN", "NODEMANAGER", HOST1, null));
-     componentHostRequests.add(new ServiceComponentHostRequest(CLUSTER_NAME, "HDFS", "HDFS_CLIENT", HOST1, null));
  
      amc.createHostComponents(componentHostRequests);
  
      RequestResourceFilter resourceFilter = new RequestResourceFilter("HDFS", null, null);
-     ExecuteActionRequest ar = new ExecuteActionRequest(CLUSTER_NAME, Role.HDFS_SERVICE_CHECK.name(), null, false);
      ar.getResourceFilters().add(resourceFilter);
      amc.createAction(ar, null);
  
--- 8480,8527 ----
  
      Long CLUSTER_ID = clusters.getCluster(CLUSTER_NAME).getClusterId();
  
+     ConfigurationRequest configRequest = new ConfigurationRequest((clusters.getCluster(CLUSTER_NAME)).getClusterId(), "global", "version1",
+       new HashMap<String, String>() {{ put("a", "b"); }}, null);
      cr.setDesiredConfig(Collections.singletonList(configRequest));
      cr.setClusterId(CLUSTER_ID);
      amc.updateClusters(Collections.singleton(cr), new HashMap<String, String>());
  
      // add some hosts
      Set<HostRequest> hrs = new HashSet<>();
+     hrs.add(new HostRequest(HOST1, (clusters.getCluster(CLUSTER_NAME)).getClusterId(), null));
      HostResourceProviderTest.createHosts(amc, hrs);
  
      Set<ServiceRequest> serviceRequests = new HashSet<>();
+     serviceRequests.add(new ServiceRequest((clusters.getCluster(CLUSTER_NAME)).getClusterId(), "HDFS", null));
+     serviceRequests.add(new ServiceRequest((clusters.getCluster(CLUSTER_NAME)).getClusterId(), "MAPREDUCE2", null));
+     serviceRequests.add(new ServiceRequest((clusters.getCluster(CLUSTER_NAME)).getClusterId(), "YARN", null));
  
      ServiceResourceProviderTest.createServices(amc, serviceRequests);
  
      Set<ServiceComponentRequest> serviceComponentRequests = new HashSet<>();
+     serviceComponentRequests.add(new ServiceComponentRequest((clusters.getCluster(CLUSTER_NAME)).getClusterId(), "HDFS", "NAMENODE", null));
+     serviceComponentRequests.add(new ServiceComponentRequest((clusters.getCluster(CLUSTER_NAME)).getClusterId(), "HDFS", "SECONDARY_NAMENODE", null));
+     serviceComponentRequests.add(new ServiceComponentRequest((clusters.getCluster(CLUSTER_NAME)).getClusterId(), "HDFS", "DATANODE", null));
+     serviceComponentRequests.add(new ServiceComponentRequest((clusters.getCluster(CLUSTER_NAME)).getClusterId(), "MAPREDUCE2", "HISTORYSERVER", null));
+     serviceComponentRequests.add(new ServiceComponentRequest((clusters.getCluster(CLUSTER_NAME)).getClusterId(), "YARN", "RESOURCEMANAGER", null));
+     serviceComponentRequests.add(new ServiceComponentRequest((clusters.getCluster(CLUSTER_NAME)).getClusterId(), "YARN", "NODEMANAGER", null));
+     serviceComponentRequests.add(new ServiceComponentRequest((clusters.getCluster(CLUSTER_NAME)).getClusterId(), "HDFS", "HDFS_CLIENT", null));
  
      ComponentResourceProviderTest.createComponents(amc, serviceComponentRequests);
  
      Set<ServiceComponentHostRequest> componentHostRequests = new HashSet<>();
+     componentHostRequests.add(new ServiceComponentHostRequest((clusters.getCluster(CLUSTER_NAME)).getClusterId(), "HDFS", "DATANODE", HOST1, null));
+     componentHostRequests.add(new ServiceComponentHostRequest((clusters.getCluster(CLUSTER_NAME)).getClusterId(), "HDFS", "NAMENODE", HOST1, null));
+     componentHostRequests.add(new ServiceComponentHostRequest((clusters.getCluster(CLUSTER_NAME)).getClusterId(), "HDFS", "SECONDARY_NAMENODE", HOST1, null));
+     componentHostRequests.add(new ServiceComponentHostRequest((clusters.getCluster(CLUSTER_NAME)).getClusterId(), "MAPREDUCE2", "HISTORYSERVER", HOST1, null));
+     componentHostRequests.add(new ServiceComponentHostRequest((clusters.getCluster(CLUSTER_NAME)).getClusterId(), "YARN", "RESOURCEMANAGER", HOST1, null));
+     componentHostRequests.add(new ServiceComponentHostRequest((clusters.getCluster(CLUSTER_NAME)).getClusterId(), "YARN", "NODEMANAGER", HOST1, null));
+     componentHostRequests.add(new ServiceComponentHostRequest((clusters.getCluster(CLUSTER_NAME)).getClusterId(), "HDFS", "HDFS_CLIENT", HOST1, null));
  
      amc.createHostComponents(componentHostRequests);
  
      RequestResourceFilter resourceFilter = new RequestResourceFilter("HDFS", null, null);
+     ExecuteActionRequest ar = new ExecuteActionRequest((clusters.getCluster(CLUSTER_NAME)).getClusterId(), Role.HDFS_SERVICE_CHECK.name(), null, false);
      ar.getResourceFilters().add(resourceFilter);
      amc.createAction(ar, null);
  
***************
*** 8523,8530 ****
      // change mind, delete the cluster
      amc.deleteCluster(cr);
  
-       assertNotNull(clusters.getHost(HOST1));
-       assertNotNull(clusters.getHost(HOST2));
  
      HostDAO dao = injector.getInstance(HostDAO.class);
  
--- 8529,8536 ----
      // change mind, delete the cluster
      amc.deleteCluster(cr);
  
+     assertNotNull(clusters.getHost(HOST1));
+     assertNotNull(clusters.getHost(HOST2));
  
      HostDAO dao = injector.getInstance(HostDAO.class);
  
***************
*** 8562,8620 ****
      amc.createCluster(clusterRequest);
  
      Set<ServiceRequest> serviceRequests = new HashSet<>();
-     serviceRequests.add(new ServiceRequest(cluster1, "HDFS", null));
-     serviceRequests.add(new ServiceRequest(cluster1, "HIVE", null));
  
      ServiceResourceProviderTest.createServices(amc, serviceRequests);
  
      Type confType = new TypeToken<Map<String, String>>() {}.getType();
  
-     ConfigurationRequest configurationRequest = new ConfigurationRequest(cluster1, "core-site", "version1",
-         gson.<Map<String, String>>fromJson("{ \"fs.default.name\" : \"localhost:8020\"}", confType), null);
      amc.createConfiguration(configurationRequest);
  
-     configurationRequest = new ConfigurationRequest(cluster1, "hdfs-site", "version1",
-         gson.<Map<String, String>>fromJson("{ \"dfs.datanode.data.dir.perm\" : \"750\"}", confType), null);
      amc.createConfiguration(configurationRequest);
  
-     configurationRequest = new ConfigurationRequest(cluster1, "global", "version1",
-         gson.<Map<String, String>>fromJson("{ \"hive.server2.enable.doAs\" : \"true\"}", confType), null);
      amc.createConfiguration(configurationRequest);
  
      Assert.assertTrue(clusters.getCluster(cluster1).getDesiredConfigs().containsKey("hive-site"));
  
      serviceRequests.clear();
-     serviceRequests.add(new ServiceRequest(cluster1, "HDFS", null));
  
      ServiceResourceProviderTest.updateServices(amc, serviceRequests, mapRequestProps, true, false);
  
      Set<ServiceComponentRequest> serviceComponentRequests = new HashSet<>();
-     serviceComponentRequests.add(new ServiceComponentRequest(cluster1, "HDFS", "NAMENODE", null));
-     serviceComponentRequests.add(new ServiceComponentRequest(cluster1, "HDFS", "SECONDARY_NAMENODE", null));
-     serviceComponentRequests.add(new ServiceComponentRequest(cluster1, "HDFS", "DATANODE", null));
-     serviceComponentRequests.add(new ServiceComponentRequest(cluster1, "HDFS", "HDFS_CLIENT", null));
  
      ComponentResourceProviderTest.createComponents(amc, serviceComponentRequests);
  
      Set<HostRequest> hostRequests = new HashSet<>();
-     hostRequests.add(new HostRequest(host1, cluster1, null));
-     hostRequests.add(new HostRequest(host2, cluster1, null));
-     hostRequests.add(new HostRequest(host3, cluster1, null));
  
      HostResourceProviderTest.createHosts(amc, hostRequests);
  
      Set<ServiceComponentHostRequest> componentHostRequests = new HashSet<>();
-     componentHostRequests.add(new ServiceComponentHostRequest(cluster1, null, "DATANODE", host1, null));
-     componentHostRequests.add(new ServiceComponentHostRequest(cluster1, null, "NAMENODE", host1, null));
-     componentHostRequests.add(new ServiceComponentHostRequest(cluster1, null, "SECONDARY_NAMENODE", host1, null));
-     componentHostRequests.add(new ServiceComponentHostRequest(cluster1, null, "DATANODE", host2, null));
-     componentHostRequests.add(new ServiceComponentHostRequest(cluster1, null, "DATANODE", host3, null));
  
  
      amc.createHostComponents(componentHostRequests);
  
      serviceRequests.clear();
-     serviceRequests.add(new ServiceRequest(cluster1, "HDFS", "INSTALLED"));
      ServiceResourceProviderTest.updateServices(amc, serviceRequests, mapRequestProps, true, false);
  
      Cluster cluster = clusters.getCluster(cluster1);
--- 8568,8626 ----
      amc.createCluster(clusterRequest);
  
      Set<ServiceRequest> serviceRequests = new HashSet<>();
+     serviceRequests.add(new ServiceRequest((clusters.getCluster(cluster1)).getClusterId(), "HDFS", null));
+     serviceRequests.add(new ServiceRequest((clusters.getCluster(cluster1)).getClusterId(), "HIVE", null));
  
      ServiceResourceProviderTest.createServices(amc, serviceRequests);
  
      Type confType = new TypeToken<Map<String, String>>() {}.getType();
  
+     ConfigurationRequest configurationRequest = new ConfigurationRequest((clusters.getCluster(cluster1)).getClusterId(), "core-site", "version1",
+       gson.<Map<String, String>>fromJson("{ \"fs.default.name\" : \"localhost:8020\"}", confType), null);
      amc.createConfiguration(configurationRequest);
  
+     configurationRequest = new ConfigurationRequest((clusters.getCluster(cluster1)).getClusterId(), "hdfs-site", "version1",
+       gson.<Map<String, String>>fromJson("{ \"dfs.datanode.data.dir.perm\" : \"750\"}", confType), null);
      amc.createConfiguration(configurationRequest);
  
+     configurationRequest = new ConfigurationRequest((clusters.getCluster(cluster1)).getClusterId(), "global", "version1",
+       gson.<Map<String, String>>fromJson("{ \"hive.server2.enable.doAs\" : \"true\"}", confType), null);
      amc.createConfiguration(configurationRequest);
  
      Assert.assertTrue(clusters.getCluster(cluster1).getDesiredConfigs().containsKey("hive-site"));
  
      serviceRequests.clear();
+     serviceRequests.add(new ServiceRequest((clusters.getCluster(cluster1)).getClusterId(), "HDFS", null));
  
      ServiceResourceProviderTest.updateServices(amc, serviceRequests, mapRequestProps, true, false);
  
      Set<ServiceComponentRequest> serviceComponentRequests = new HashSet<>();
+     serviceComponentRequests.add(new ServiceComponentRequest((clusters.getCluster(cluster1)).getClusterId(), "HDFS", "NAMENODE", null));
+     serviceComponentRequests.add(new ServiceComponentRequest((clusters.getCluster(cluster1)).getClusterId(), "HDFS", "SECONDARY_NAMENODE", null));
+     serviceComponentRequests.add(new ServiceComponentRequest((clusters.getCluster(cluster1)).getClusterId(), "HDFS", "DATANODE", null));
+     serviceComponentRequests.add(new ServiceComponentRequest((clusters.getCluster(cluster1)).getClusterId(), "HDFS", "HDFS_CLIENT", null));
  
      ComponentResourceProviderTest.createComponents(amc, serviceComponentRequests);
  
      Set<HostRequest> hostRequests = new HashSet<>();
+     hostRequests.add(new HostRequest(host1, (clusters.getCluster(cluster1)).getClusterId(), null));
+     hostRequests.add(new HostRequest(host2, (clusters.getCluster(cluster1)).getClusterId(), null));
+     hostRequests.add(new HostRequest(host3, (clusters.getCluster(cluster1)).getClusterId(), null));
  
      HostResourceProviderTest.createHosts(amc, hostRequests);
  
      Set<ServiceComponentHostRequest> componentHostRequests = new HashSet<>();
+     componentHostRequests.add(new ServiceComponentHostRequest((clusters.getCluster(cluster1)).getClusterId(), null, "DATANODE", host1, null));
+     componentHostRequests.add(new ServiceComponentHostRequest((clusters.getCluster(cluster1)).getClusterId(), null, "NAMENODE", host1, null));
+     componentHostRequests.add(new ServiceComponentHostRequest((clusters.getCluster(cluster1)).getClusterId(), null, "SECONDARY_NAMENODE", host1, null));
+     componentHostRequests.add(new ServiceComponentHostRequest((clusters.getCluster(cluster1)).getClusterId(), null, "DATANODE", host2, null));
+     componentHostRequests.add(new ServiceComponentHostRequest((clusters.getCluster(cluster1)).getClusterId(), null, "DATANODE", host3, null));
  
  
      amc.createHostComponents(componentHostRequests);
  
      serviceRequests.clear();
+     serviceRequests.add(new ServiceRequest((clusters.getCluster(cluster1)).getClusterId(), "HDFS", "INSTALLED"));
      ServiceResourceProviderTest.updateServices(amc, serviceRequests, mapRequestProps, true, false);
  
      Cluster cluster = clusters.getCluster(cluster1);
***************
*** 8681,8696 ****
      componentHost.handleEvent(new ServiceComponentHostOpSucceededEvent(componentHost.getServiceComponentName(), componentHost.getHostName(), System.currentTimeMillis()));
  
      serviceRequests.clear();
-     serviceRequests.add(new ServiceRequest(cluster1, "HDFS", "STARTED"));
  
      RequestStatusResponse response = ServiceResourceProviderTest.updateServices(amc, serviceRequests,
-         mapRequestProps, true, false);
      for (ShortTaskStatus shortTaskStatus : response.getTasks()) {
        assertFalse(host1.equals(shortTaskStatus.getHostName()) && "NAMENODE".equals(shortTaskStatus.getRole()));
      }
  
      componentHostRequests.clear();
-     componentHostRequests.add(new ServiceComponentHostRequest(cluster1, null, "NAMENODE", host1, null));
  
      amc.deleteHostComponents(componentHostRequests);
  
--- 8687,8702 ----
      componentHost.handleEvent(new ServiceComponentHostOpSucceededEvent(componentHost.getServiceComponentName(), componentHost.getHostName(), System.currentTimeMillis()));
  
      serviceRequests.clear();
+     serviceRequests.add(new ServiceRequest((clusters.getCluster(cluster1)).getClusterId(), "HDFS", "STARTED"));
  
      RequestStatusResponse response = ServiceResourceProviderTest.updateServices(amc, serviceRequests,
+       mapRequestProps, true, false);
      for (ShortTaskStatus shortTaskStatus : response.getTasks()) {
        assertFalse(host1.equals(shortTaskStatus.getHostName()) && "NAMENODE".equals(shortTaskStatus.getRole()));
      }
  
      componentHostRequests.clear();
+     componentHostRequests.add(new ServiceComponentHostRequest((clusters.getCluster(cluster1)).getClusterId(), null, "NAMENODE", host1, null));
  
      amc.deleteHostComponents(componentHostRequests);
  
***************
*** 8743,8763 ****
      // ServiceComponentHost remains in disabled after service stop
      assertEquals(sch.getServiceComponentName(),"DATANODE");
      serviceRequests.clear();
-     serviceRequests.add(new ServiceRequest(cluster1, "HDFS", "INSTALLED"));
      ServiceResourceProviderTest.updateServices(amc, serviceRequests,
        mapRequestProps, true, false);
      assertEquals(State.DISABLED, sch.getState());
  
      // ServiceComponentHost remains in disabled after service start
      serviceRequests.clear();
-     serviceRequests.add(new ServiceRequest(cluster1, "HDFS", "STARTED"));
      ServiceResourceProviderTest.updateServices(amc, serviceRequests,
        mapRequestProps, true, false);
      assertEquals(State.DISABLED, sch.getState());
  
      // confirm delete
      componentHostRequests.clear();
-     componentHostRequests.add(new ServiceComponentHostRequest(cluster1, null, "DATANODE", host2, null));
      amc.deleteHostComponents(componentHostRequests);
  
      sch = null;
--- 8749,8769 ----
      // ServiceComponentHost remains in disabled after service stop
      assertEquals(sch.getServiceComponentName(),"DATANODE");
      serviceRequests.clear();
+     serviceRequests.add(new ServiceRequest((clusters.getCluster(cluster1)).getClusterId(), "HDFS", "INSTALLED"));
      ServiceResourceProviderTest.updateServices(amc, serviceRequests,
        mapRequestProps, true, false);
      assertEquals(State.DISABLED, sch.getState());
  
      // ServiceComponentHost remains in disabled after service start
      serviceRequests.clear();
+     serviceRequests.add(new ServiceRequest((clusters.getCluster(cluster1)).getClusterId(), "HDFS", "STARTED"));
      ServiceResourceProviderTest.updateServices(amc, serviceRequests,
        mapRequestProps, true, false);
      assertEquals(State.DISABLED, sch.getState());
  
      // confirm delete
      componentHostRequests.clear();
+     componentHostRequests.add(new ServiceComponentHostRequest((clusters.getCluster(cluster1)).getClusterId(), null, "DATANODE", host2, null));
      amc.deleteHostComponents(componentHostRequests);
  
      sch = null;
***************
*** 8772,8828 ****
      *Test remove service
      */
      serviceRequests.clear();
-     serviceRequests.add(new ServiceRequest(cluster1, "HDFS", "INSTALLED"));
      ServiceResourceProviderTest.updateServices(amc, serviceRequests, mapRequestProps, true, false);
      serviceRequests.clear();
-     serviceRequests.add(new ServiceRequest(cluster1, null, null));
      org.junit.Assert.assertEquals(2, ServiceResourceProviderTest.getServices(amc, serviceRequests).size());
      serviceRequests.clear();
-     serviceRequests.add(new ServiceRequest(cluster1, "HDFS", null));
-     serviceRequests.add(new ServiceRequest(cluster1, "HIVE", null));
      ServiceResourceProviderTest.deleteServices(amc, serviceRequests);
      serviceRequests.clear();
-     serviceRequests.add(new ServiceRequest(cluster1, null, null));
      org.junit.Assert.assertEquals(0, ServiceResourceProviderTest.getServices(amc, serviceRequests).size());
  
      /*
      *Test add service again
      */
      serviceRequests.clear();
-     serviceRequests.add(new ServiceRequest(cluster1, "HDFS", null));
  
      ServiceResourceProviderTest.createServices(amc, serviceRequests);
  
      org.junit.Assert.assertEquals(1, ServiceResourceProviderTest.getServices(amc, serviceRequests).size());
      //Create new configs
-     configurationRequest = new ConfigurationRequest(cluster1, "core-site", "version2",
-         gson.<Map<String, String>>fromJson("{ \"fs.default.name\" : \"localhost:8020\"}", confType), null);
      amc.createConfiguration(configurationRequest);
-     configurationRequest = new ConfigurationRequest(cluster1, "hdfs-site", "version2",
-         gson.<Map<String, String>>fromJson("{ \"dfs.datanode.data.dir.perm\" : \"750\"}", confType), null);
      amc.createConfiguration(configurationRequest);
-     configurationRequest = new ConfigurationRequest(cluster1, "global", "version2",
-         gson.<Map<String, String>>fromJson("{ \"hbase_hdfs_root_dir\" : \"/apps/hbase/\"}", confType), null);
      amc.createConfiguration(configurationRequest);
      //Add configs to service
      serviceRequests.clear();
-     serviceRequests.add(new ServiceRequest(cluster1, "HDFS", null));
      ServiceResourceProviderTest.updateServices(amc, serviceRequests, mapRequestProps, true, false);
      //Crate service components
      serviceComponentRequests = new HashSet<>();
-     serviceComponentRequests.add(new ServiceComponentRequest(cluster1, "HDFS", "NAMENODE", null));
-     serviceComponentRequests.add(new ServiceComponentRequest(cluster1, "HDFS", "SECONDARY_NAMENODE", null));
-     serviceComponentRequests.add(new ServiceComponentRequest(cluster1, "HDFS", "DATANODE", null));
-     serviceComponentRequests.add(new ServiceComponentRequest(cluster1, "HDFS", "HDFS_CLIENT", null));
      ComponentResourceProviderTest.createComponents(amc, serviceComponentRequests);
  
      //Create ServiceComponentHosts
      componentHostRequests = new HashSet<>();
-     componentHostRequests.add(new ServiceComponentHostRequest(cluster1, null, "DATANODE", "host1", null));
-     componentHostRequests.add(new ServiceComponentHostRequest(cluster1, null, "NAMENODE", "host1", null));
-     componentHostRequests.add(new ServiceComponentHostRequest(cluster1, null, "SECONDARY_NAMENODE", host1, null));
-     componentHostRequests.add(new ServiceComponentHostRequest(cluster1, null, "DATANODE", "host2", null));
-     componentHostRequests.add(new ServiceComponentHostRequest(cluster1, null, "DATANODE", "host3", null));
      amc.createHostComponents(componentHostRequests);
  
  
--- 8778,8834 ----
      *Test remove service
      */
      serviceRequests.clear();
+     serviceRequests.add(new ServiceRequest((clusters.getCluster(cluster1)).getClusterId(), "HDFS", "INSTALLED"));
      ServiceResourceProviderTest.updateServices(amc, serviceRequests, mapRequestProps, true, false);
      serviceRequests.clear();
+     serviceRequests.add(new ServiceRequest((clusters.getCluster(cluster1)).getClusterId(), null, null));
      org.junit.Assert.assertEquals(2, ServiceResourceProviderTest.getServices(amc, serviceRequests).size());
      serviceRequests.clear();
+     serviceRequests.add(new ServiceRequest((clusters.getCluster(cluster1)).getClusterId(), "HDFS", null));
+     serviceRequests.add(new ServiceRequest((clusters.getCluster(cluster1)).getClusterId(), "HIVE", null));
      ServiceResourceProviderTest.deleteServices(amc, serviceRequests);
      serviceRequests.clear();
+     serviceRequests.add(new ServiceRequest((clusters.getCluster(cluster1)).getClusterId(), null, null));
      org.junit.Assert.assertEquals(0, ServiceResourceProviderTest.getServices(amc, serviceRequests).size());
  
      /*
      *Test add service again
      */
      serviceRequests.clear();
+     serviceRequests.add(new ServiceRequest((clusters.getCluster(cluster1)).getClusterId(), "HDFS", null));
  
      ServiceResourceProviderTest.createServices(amc, serviceRequests);
  
      org.junit.Assert.assertEquals(1, ServiceResourceProviderTest.getServices(amc, serviceRequests).size());
      //Create new configs
+     configurationRequest = new ConfigurationRequest((clusters.getCluster(cluster1)).getClusterId(), "core-site", "version2",
+       gson.<Map<String, String>>fromJson("{ \"fs.default.name\" : \"localhost:8020\"}", confType), null);
      amc.createConfiguration(configurationRequest);
+     configurationRequest = new ConfigurationRequest((clusters.getCluster(cluster1)).getClusterId(), "hdfs-site", "version2",
+       gson.<Map<String, String>>fromJson("{ \"dfs.datanode.data.dir.perm\" : \"750\"}", confType), null);
      amc.createConfiguration(configurationRequest);
+     configurationRequest = new ConfigurationRequest((clusters.getCluster(cluster1)).getClusterId(), "global", "version2",
+       gson.<Map<String, String>>fromJson("{ \"hbase_hdfs_root_dir\" : \"/apps/hbase/\"}", confType), null);
      amc.createConfiguration(configurationRequest);
      //Add configs to service
      serviceRequests.clear();
+     serviceRequests.add(new ServiceRequest((clusters.getCluster(cluster1)).getClusterId(), "HDFS", null));
      ServiceResourceProviderTest.updateServices(amc, serviceRequests, mapRequestProps, true, false);
      //Crate service components
      serviceComponentRequests = new HashSet<>();
+     serviceComponentRequests.add(new ServiceComponentRequest((clusters.getCluster(cluster1)).getClusterId(), "HDFS", "NAMENODE", null));
+     serviceComponentRequests.add(new ServiceComponentRequest((clusters.getCluster(cluster1)).getClusterId(), "HDFS", "SECONDARY_NAMENODE", null));
+     serviceComponentRequests.add(new ServiceComponentRequest((clusters.getCluster(cluster1)).getClusterId(), "HDFS", "DATANODE", null));
+     serviceComponentRequests.add(new ServiceComponentRequest((clusters.getCluster(cluster1)).getClusterId(), "HDFS", "HDFS_CLIENT", null));
      ComponentResourceProviderTest.createComponents(amc, serviceComponentRequests);
  
      //Create ServiceComponentHosts
      componentHostRequests = new HashSet<>();
+     componentHostRequests.add(new ServiceComponentHostRequest((clusters.getCluster(cluster1)).getClusterId(), null, "DATANODE", "host1", null));
+     componentHostRequests.add(new ServiceComponentHostRequest((clusters.getCluster(cluster1)).getClusterId(), null, "NAMENODE", "host1", null));
+     componentHostRequests.add(new ServiceComponentHostRequest((clusters.getCluster(cluster1)).getClusterId(), null, "SECONDARY_NAMENODE", host1, null));
+     componentHostRequests.add(new ServiceComponentHostRequest((clusters.getCluster(cluster1)).getClusterId(), null, "DATANODE", "host2", null));
+     componentHostRequests.add(new ServiceComponentHostRequest((clusters.getCluster(cluster1)).getClusterId(), null, "DATANODE", "host3", null));
      amc.createHostComponents(componentHostRequests);
  
  
***************
*** 8861,8902 ****
      amc.createCluster(clusterRequest);
  
      Set<ServiceRequest> serviceRequests = new HashSet<>();
-     serviceRequests.add(new ServiceRequest(CLUSTER_NAME, "HDFS", null));
-     serviceRequests.add(new ServiceRequest(CLUSTER_NAME, "MAPREDUCE2", null));
-     serviceRequests.add(new ServiceRequest(CLUSTER_NAME, "YARN", null));
  
      ServiceResourceProviderTest.createServices(amc, serviceRequests);
  
      Set<ServiceComponentRequest> serviceComponentRequests = new HashSet<>();
-     serviceComponentRequests.add(new ServiceComponentRequest(CLUSTER_NAME, "HDFS", "NAMENODE", null));
-     serviceComponentRequests.add(new ServiceComponentRequest(CLUSTER_NAME, "HDFS", "SECONDARY_NAMENODE", null));
-     serviceComponentRequests.add(new ServiceComponentRequest(CLUSTER_NAME, "HDFS", "DATANODE", null));
-     serviceComponentRequests.add(new ServiceComponentRequest(CLUSTER_NAME, "MAPREDUCE2", "HISTORYSERVER", null));
-     serviceComponentRequests.add(new ServiceComponentRequest(CLUSTER_NAME, "YARN", "RESOURCEMANAGER", null));
-     serviceComponentRequests.add(new ServiceComponentRequest(CLUSTER_NAME, "YARN", "NODEMANAGER", null));
  
      ComponentResourceProviderTest.createComponents(amc, serviceComponentRequests);
  
      Set<HostRequest> hostRequests = new HashSet<>();
-     hostRequests.add(new HostRequest(HOST1, CLUSTER_NAME, null));
  
      HostResourceProviderTest.createHosts(amc, hostRequests);
  
      Set<ServiceComponentHostRequest> componentHostRequests = new HashSet<>();
-     componentHostRequests.add(new ServiceComponentHostRequest(CLUSTER_NAME, null, "DATANODE", HOST1, null));
-     componentHostRequests.add(new ServiceComponentHostRequest(CLUSTER_NAME, null, "NAMENODE", HOST1, null));
-     componentHostRequests.add(new ServiceComponentHostRequest(CLUSTER_NAME, null, "SECONDARY_NAMENODE", HOST1, null));
-     componentHostRequests.add(new ServiceComponentHostRequest(CLUSTER_NAME, null, "HISTORYSERVER", HOST1, null));
-     componentHostRequests.add(new ServiceComponentHostRequest(CLUSTER_NAME, null, "RESOURCEMANAGER", HOST1, null));
-     componentHostRequests.add(new ServiceComponentHostRequest(CLUSTER_NAME, null, "NODEMANAGER", HOST1, null));
  
      amc.createHostComponents(componentHostRequests);
  
      //Install services
      serviceRequests.clear();
-     serviceRequests.add(new ServiceRequest(CLUSTER_NAME, "HDFS", State.INSTALLED.name()));
-     serviceRequests.add(new ServiceRequest(CLUSTER_NAME, "MAPREDUCE2", State.INSTALLED.name()));
-     serviceRequests.add(new ServiceRequest(CLUSTER_NAME, "YARN", State.INSTALLED.name()));
  
      ServiceResourceProviderTest.updateServices(amc, serviceRequests, mapRequestProps, true, false);
  
--- 8867,8908 ----
      amc.createCluster(clusterRequest);
  
      Set<ServiceRequest> serviceRequests = new HashSet<>();
+     serviceRequests.add(new ServiceRequest((clusters.getCluster(CLUSTER_NAME)).getClusterId(), "HDFS", null));
+     serviceRequests.add(new ServiceRequest((clusters.getCluster(CLUSTER_NAME)).getClusterId(), "MAPREDUCE2", null));
+     serviceRequests.add(new ServiceRequest((clusters.getCluster(CLUSTER_NAME)).getClusterId(), "YARN", null));
  
      ServiceResourceProviderTest.createServices(amc, serviceRequests);
  
      Set<ServiceComponentRequest> serviceComponentRequests = new HashSet<>();
+     serviceComponentRequests.add(new ServiceComponentRequest((clusters.getCluster(CLUSTER_NAME)).getClusterId(), "HDFS", "NAMENODE", null));
+     serviceComponentRequests.add(new ServiceComponentRequest((clusters.getCluster(CLUSTER_NAME)).getClusterId(), "HDFS", "SECONDARY_NAMENODE", null));
+     serviceComponentRequests.add(new ServiceComponentRequest((clusters.getCluster(CLUSTER_NAME)).getClusterId(), "HDFS", "DATANODE", null));
+     serviceComponentRequests.add(new ServiceComponentRequest((clusters.getCluster(CLUSTER_NAME)).getClusterId(), "MAPREDUCE2", "HISTORYSERVER", null));
+     serviceComponentRequests.add(new ServiceComponentRequest((clusters.getCluster(CLUSTER_NAME)).getClusterId(), "YARN", "RESOURCEMANAGER", null));
+     serviceComponentRequests.add(new ServiceComponentRequest((clusters.getCluster(CLUSTER_NAME)).getClusterId(), "YARN", "NODEMANAGER", null));
  
      ComponentResourceProviderTest.createComponents(amc, serviceComponentRequests);
  
      Set<HostRequest> hostRequests = new HashSet<>();
+     hostRequests.add(new HostRequest(HOST1, (clusters.getCluster(CLUSTER_NAME)).getClusterId(), null));
  
      HostResourceProviderTest.createHosts(amc, hostRequests);
  
      Set<ServiceComponentHostRequest> componentHostRequests = new HashSet<>();
+     componentHostRequests.add(new ServiceComponentHostRequest((clusters.getCluster(CLUSTER_NAME)).getClusterId(), null, "DATANODE", HOST1, null));
+     componentHostRequests.add(new ServiceComponentHostRequest((clusters.getCluster(CLUSTER_NAME)).getClusterId(), null, "NAMENODE", HOST1, null));
+     componentHostRequests.add(new ServiceComponentHostRequest((clusters.getCluster(CLUSTER_NAME)).getClusterId(), null, "SECONDARY_NAMENODE", HOST1, null));
+     componentHostRequests.add(new ServiceComponentHostRequest((clusters.getCluster(CLUSTER_NAME)).getClusterId(), null, "HISTORYSERVER", HOST1, null));
+     componentHostRequests.add(new ServiceComponentHostRequest((clusters.getCluster(CLUSTER_NAME)).getClusterId(), null, "RESOURCEMANAGER", HOST1, null));
+     componentHostRequests.add(new ServiceComponentHostRequest((clusters.getCluster(CLUSTER_NAME)).getClusterId(), null, "NODEMANAGER", HOST1, null));
  
      amc.createHostComponents(componentHostRequests);
  
      //Install services
      serviceRequests.clear();
+     serviceRequests.add(new ServiceRequest((clusters.getCluster(CLUSTER_NAME)).getClusterId(), "HDFS", State.INSTALLED.name()));
+     serviceRequests.add(new ServiceRequest((clusters.getCluster(CLUSTER_NAME)).getClusterId(), "MAPREDUCE2", State.INSTALLED.name()));
+     serviceRequests.add(new ServiceRequest((clusters.getCluster(CLUSTER_NAME)).getClusterId(), "YARN", State.INSTALLED.name()));
  
      ServiceResourceProviderTest.updateServices(amc, serviceRequests, mapRequestProps, true, false);
  
***************
*** 8918,8929 ****
  
      //Start services
      serviceRequests.clear();
-     serviceRequests.add(new ServiceRequest(CLUSTER_NAME, "HDFS", State.STARTED.name()));
-     serviceRequests.add(new ServiceRequest(CLUSTER_NAME, "MAPREDUCE2", State.STARTED.name()));
-     serviceRequests.add(new ServiceRequest(CLUSTER_NAME, "YARN", State.STARTED.name()));
  
      RequestStatusResponse response = ServiceResourceProviderTest.updateServices(amc, serviceRequests,
-         mapRequestProps, true, false);
  
      Collection<?> hdfsSmokeTasks = CollectionUtils.select(response.getTasks(), new RolePredicate(HDFS_SERVICE_CHECK_ROLE));
      //Ensure that smoke test task was created for HDFS
--- 8924,8935 ----
  
      //Start services
      serviceRequests.clear();
+     serviceRequests.add(new ServiceRequest((clusters.getCluster(CLUSTER_NAME)).getClusterId(), "HDFS", State.STARTED.name()));
+     serviceRequests.add(new ServiceRequest((clusters.getCluster(CLUSTER_NAME)).getClusterId(), "MAPREDUCE2", State.STARTED.name()));
+     serviceRequests.add(new ServiceRequest((clusters.getCluster(CLUSTER_NAME)).getClusterId(), "YARN", State.STARTED.name()));
  
      RequestStatusResponse response = ServiceResourceProviderTest.updateServices(amc, serviceRequests,
+       mapRequestProps, true, false);
  
      Collection<?> hdfsSmokeTasks = CollectionUtils.select(response.getTasks(), new RolePredicate(HDFS_SERVICE_CHECK_ROLE));
      //Ensure that smoke test task was created for HDFS
***************
*** 8951,8957 ****
      ServiceResponse response = createNiceMock(ServiceResponse.class);
  
      // requests
-     ServiceRequest request1 = new ServiceRequest("cluster1", "service1", null);
  
      Set<ServiceRequest> setRequests = new HashSet<>();
      setRequests.add(request1);
--- 8957,8963 ----
      ServiceResponse response = createNiceMock(ServiceResponse.class);
  
      // requests
+     ServiceRequest request1 = new ServiceRequest((clusters.getCluster("cluster1")).getClusterId(), "service1", null);
  
      Set<ServiceRequest> setRequests = new HashSet<>();
      setRequests.add(request1);
***************
*** 8996,9002 ****
      Cluster cluster = createNiceMock(Cluster.class);
  
      // requests
-     ServiceRequest request1 = new ServiceRequest("cluster1", "service1", null);
      Set<ServiceRequest> setRequests = new HashSet<>();
      setRequests.add(request1);
  
--- 9002,9008 ----
      Cluster cluster = createNiceMock(Cluster.class);
  
      // requests
+     ServiceRequest request1 = new ServiceRequest((clusters.getCluster("cluster1")).getClusterId(), "service1", null);
      Set<ServiceRequest> setRequests = new HashSet<>();
      setRequests.add(request1);
  
***************
*** 9048,9057 ****
      ServiceResponse response2 = createNiceMock(ServiceResponse.class);
  
      // requests
-     ServiceRequest request1 = new ServiceRequest("cluster1", "service1", null);
-     ServiceRequest request2 = new ServiceRequest("cluster1", "service2", null);
-     ServiceRequest request3 = new ServiceRequest("cluster1", "service3", null);
-     ServiceRequest request4 = new ServiceRequest("cluster1", "service4", null);
  
      Set<ServiceRequest> setRequests = new HashSet<>();
      setRequests.add(request1);
--- 9054,9063 ----
      ServiceResponse response2 = createNiceMock(ServiceResponse.class);
  
      // requests
+     ServiceRequest request1 = new ServiceRequest((clusters.getCluster("cluster1")).getClusterId(), "service1", null);
+     ServiceRequest request2 = new ServiceRequest((clusters.getCluster("cluster1")).getClusterId(), "service2", null);
+     ServiceRequest request3 = new ServiceRequest((clusters.getCluster("cluster1")).getClusterId(), "service3", null);
+     ServiceRequest request4 = new ServiceRequest((clusters.getCluster("cluster1")).getClusterId(), "service4", null);
  
      Set<ServiceRequest> setRequests = new HashSet<>();
      setRequests.add(request1);
***************
*** 9095,9118 ****
    private void testRunSmokeTestFlag(Map<String, String> mapRequestProps,
                                      AmbariManagementController amc,
                                      Set<ServiceRequest> serviceRequests)
-       throws AmbariException, AuthorizationException {
      RequestStatusResponse response;//Starting HDFS service. No run_smoke_test flag is set, smoke
  
      String cluster1 = getUniqueName();
  
      //Stopping HDFS service
      serviceRequests.clear();
-     serviceRequests.add(new ServiceRequest(cluster1, "HDFS", "INSTALLED"));
      ServiceResourceProviderTest.updateServices(amc, serviceRequests, mapRequestProps, false,
-         false);
  
      //Starting HDFS service. No run_smoke_test flag is set, smoke
      // test(HDFS_SERVICE_CHECK) won't run
      boolean runSmokeTest = false;
      serviceRequests.clear();
-     serviceRequests.add(new ServiceRequest(cluster1, "HDFS", "STARTED"));
      response = ServiceResourceProviderTest.updateServices(amc, serviceRequests, mapRequestProps,
-         runSmokeTest, false);
  
      List<ShortTaskStatus> taskStatuses = response.getTasks();
      boolean smokeTestRequired = false;
--- 9101,9124 ----
    private void testRunSmokeTestFlag(Map<String, String> mapRequestProps,
                                      AmbariManagementController amc,
                                      Set<ServiceRequest> serviceRequests)
+     throws AmbariException, AuthorizationException {
      RequestStatusResponse response;//Starting HDFS service. No run_smoke_test flag is set, smoke
  
      String cluster1 = getUniqueName();
  
      //Stopping HDFS service
      serviceRequests.clear();
+     serviceRequests.add(new ServiceRequest((clusters.getCluster(cluster1)).getClusterId(), "HDFS", "INSTALLED"));
      ServiceResourceProviderTest.updateServices(amc, serviceRequests, mapRequestProps, false,
+       false);
  
      //Starting HDFS service. No run_smoke_test flag is set, smoke
      // test(HDFS_SERVICE_CHECK) won't run
      boolean runSmokeTest = false;
      serviceRequests.clear();
+     serviceRequests.add(new ServiceRequest((clusters.getCluster(cluster1)).getClusterId(), "HDFS", "STARTED"));
      response = ServiceResourceProviderTest.updateServices(amc, serviceRequests, mapRequestProps,
+       runSmokeTest, false);
  
      List<ShortTaskStatus> taskStatuses = response.getTasks();
      boolean smokeTestRequired = false;
***************
*** 9125,9141 ****
  
      //Stopping HDFS service
      serviceRequests.clear();
-     serviceRequests.add(new ServiceRequest(cluster1, "HDFS", "INSTALLED"));
      ServiceResourceProviderTest.updateServices(amc, serviceRequests, mapRequestProps, false,
-         false);
  
      //Starting HDFS service again.
      //run_smoke_test flag is set, smoke test will be run
      runSmokeTest = true;
      serviceRequests.clear();
-     serviceRequests.add(new ServiceRequest(cluster1, "HDFS", "STARTED"));
      response = ServiceResourceProviderTest.updateServices(amc, serviceRequests, mapRequestProps,
-         runSmokeTest, false);
  
      taskStatuses = response.getTasks();
      smokeTestRequired = false;
--- 9131,9147 ----
  
      //Stopping HDFS service
      serviceRequests.clear();
+     serviceRequests.add(new ServiceRequest((clusters.getCluster(cluster1)).getClusterId(), "HDFS", "INSTALLED"));
      ServiceResourceProviderTest.updateServices(amc, serviceRequests, mapRequestProps, false,
+       false);
  
      //Starting HDFS service again.
      //run_smoke_test flag is set, smoke test will be run
      runSmokeTest = true;
      serviceRequests.clear();
+     serviceRequests.add(new ServiceRequest((clusters.getCluster(cluster1)).getClusterId(), "HDFS", "STARTED"));
      response = ServiceResourceProviderTest.updateServices(amc, serviceRequests, mapRequestProps,
+       runSmokeTest, false);
  
      taskStatuses = response.getTasks();
      smokeTestRequired = false;
***************
*** 9373,9390 ****
      MaintenanceStateHelper maintenanceStateHelper = MaintenanceStateHelperTest.getMaintenanceStateHelperInstance(clusters);
  
      // test updating a service
-     ServiceRequest sr = new ServiceRequest(cluster1, serviceName, null);
      sr.setMaintenanceState(MaintenanceState.ON.name());
      ServiceResourceProviderTest.updateServices(controller,
-         Collections.singleton(sr), requestProperties, false, false,
-         maintenanceStateHelper);
      Assert.assertEquals(MaintenanceState.ON, service.getMaintenanceState());
  
      // check the host components implied state vs desired state
      for (ServiceComponent sc : service.getServiceComponents().values()) {
        for (ServiceComponentHost sch : sc.getServiceComponentHosts().values()) {
          Assert.assertEquals(MaintenanceState.IMPLIED_FROM_SERVICE,
-             controller.getEffectiveMaintenanceState(sch));
          Assert.assertEquals(MaintenanceState.OFF, sch.getMaintenanceState());
        }
      }
--- 9379,9396 ----
      MaintenanceStateHelper maintenanceStateHelper = MaintenanceStateHelperTest.getMaintenanceStateHelperInstance(clusters);
  
      // test updating a service
+     ServiceRequest sr = new ServiceRequest((clusters.getCluster(cluster1)).getClusterId(), serviceName, null);
      sr.setMaintenanceState(MaintenanceState.ON.name());
      ServiceResourceProviderTest.updateServices(controller,
+       Collections.singleton(sr), requestProperties, false, false,
+       maintenanceStateHelper);
      Assert.assertEquals(MaintenanceState.ON, service.getMaintenanceState());
  
      // check the host components implied state vs desired state
      for (ServiceComponent sc : service.getServiceComponents().values()) {
        for (ServiceComponentHost sch : sc.getServiceComponentHosts().values()) {
          Assert.assertEquals(MaintenanceState.IMPLIED_FROM_SERVICE,
+           controller.getEffectiveMaintenanceState(sch));
          Assert.assertEquals(MaintenanceState.OFF, sch.getMaintenanceState());
        }
      }
***************
*** 9392,9419 ****
      // reset
      sr.setMaintenanceState(MaintenanceState.OFF.name());
      ServiceResourceProviderTest.updateServices(controller,
-         Collections.singleton(sr), requestProperties, false, false,
-         maintenanceStateHelper);
      Assert.assertEquals(MaintenanceState.OFF, service.getMaintenanceState());
  
      // check the host components implied state vs desired state
      for (ServiceComponent sc : service.getServiceComponents().values()) {
        for (ServiceComponentHost sch : sc.getServiceComponentHosts().values()) {
          Assert.assertEquals(MaintenanceState.OFF,
-             controller.getEffectiveMaintenanceState(sch));
          Assert.assertEquals(MaintenanceState.OFF, sch.getMaintenanceState());
        }
      }
  
      // passivate a host
-     HostRequest hr = new HostRequest(host1, cluster1, requestProperties);
      hr.setMaintenanceState(MaintenanceState.ON.name());
      HostResourceProviderTest.updateHosts(controller, Collections.singleton(hr)
      );
  
      Host host = hosts.get(host1);
      Assert.assertEquals(MaintenanceState.ON,
-         host.getMaintenanceState(cluster.getClusterId()));
  
      // check the host components implied state vs desired state, only for
      // affected hosts
--- 9398,9425 ----
      // reset
      sr.setMaintenanceState(MaintenanceState.OFF.name());
      ServiceResourceProviderTest.updateServices(controller,
+       Collections.singleton(sr), requestProperties, false, false,
+       maintenanceStateHelper);
      Assert.assertEquals(MaintenanceState.OFF, service.getMaintenanceState());
  
      // check the host components implied state vs desired state
      for (ServiceComponent sc : service.getServiceComponents().values()) {
        for (ServiceComponentHost sch : sc.getServiceComponentHosts().values()) {
          Assert.assertEquals(MaintenanceState.OFF,
+           controller.getEffectiveMaintenanceState(sch));
          Assert.assertEquals(MaintenanceState.OFF, sch.getMaintenanceState());
        }
      }
  
      // passivate a host
+     HostRequest hr = new HostRequest(host1, (clusters.getCluster(cluster1)).getClusterId(), requestProperties);
      hr.setMaintenanceState(MaintenanceState.ON.name());
      HostResourceProviderTest.updateHosts(controller, Collections.singleton(hr)
      );
  
      Host host = hosts.get(host1);
      Assert.assertEquals(MaintenanceState.ON,
+       host.getMaintenanceState(cluster.getClusterId()));
  
      // check the host components implied state vs desired state, only for
      // affected hosts
***************
*** 9436,9456 ****
  
      host = hosts.get(host1);
      Assert.assertEquals(MaintenanceState.OFF,
-         host.getMaintenanceState(cluster.getClusterId()));
  
      // check the host components active state vs desired state
      for (ServiceComponent sc : service.getServiceComponents().values()) {
        for (ServiceComponentHost sch : sc.getServiceComponentHosts().values()) {
          Assert.assertEquals(MaintenanceState.OFF,
-             controller.getEffectiveMaintenanceState(sch));
          Assert.assertEquals(MaintenanceState.OFF, sch.getMaintenanceState());
        }
      }
  
      // passivate several hosts
-     HostRequest hr1 = new HostRequest(host1, cluster1, requestProperties);
      hr1.setMaintenanceState(MaintenanceState.ON.name());
-     HostRequest hr2 = new HostRequest(host2, cluster1, requestProperties);
      hr2.setMaintenanceState(MaintenanceState.ON.name());
      Set<HostRequest> set = new HashSet<>();
      set.add(hr1);
--- 9442,9462 ----
  
      host = hosts.get(host1);
      Assert.assertEquals(MaintenanceState.OFF,
+       host.getMaintenanceState(cluster.getClusterId()));
  
      // check the host components active state vs desired state
      for (ServiceComponent sc : service.getServiceComponents().values()) {
        for (ServiceComponentHost sch : sc.getServiceComponentHosts().values()) {
          Assert.assertEquals(MaintenanceState.OFF,
+           controller.getEffectiveMaintenanceState(sch));
          Assert.assertEquals(MaintenanceState.OFF, sch.getMaintenanceState());
        }
      }
  
      // passivate several hosts
+     HostRequest hr1 = new HostRequest(host1, (clusters.getCluster(cluster1)).getClusterId(), requestProperties);
      hr1.setMaintenanceState(MaintenanceState.ON.name());
+     HostRequest hr2 = new HostRequest(host2, (clusters.getCluster(cluster1)).getClusterId(), requestProperties);
      hr2.setMaintenanceState(MaintenanceState.ON.name());
      Set<HostRequest> set = new HashSet<>();
      set.add(hr1);
***************
*** 9460,9474 ****
  
      host = hosts.get(host1);
      Assert.assertEquals(MaintenanceState.ON,
-         host.getMaintenanceState(cluster.getClusterId()));
      host = hosts.get(host2);
      Assert.assertEquals(MaintenanceState.ON,
-         host.getMaintenanceState(cluster.getClusterId()));
  
      // reset
-     hr1 = new HostRequest(host1, cluster1, requestProperties);
      hr1.setMaintenanceState(MaintenanceState.OFF.name());
-     hr2 = new HostRequest(host2, cluster1, requestProperties);
      hr2.setMaintenanceState(MaintenanceState.OFF.name());
      set = new HashSet<>();
      set.add(hr1);
--- 9466,9480 ----
  
      host = hosts.get(host1);
      Assert.assertEquals(MaintenanceState.ON,
+       host.getMaintenanceState(cluster.getClusterId()));
      host = hosts.get(host2);
      Assert.assertEquals(MaintenanceState.ON,
+       host.getMaintenanceState(cluster.getClusterId()));
  
      // reset
+     hr1 = new HostRequest(host1, (clusters.getCluster(cluster1)).getClusterId(), requestProperties);
      hr1.setMaintenanceState(MaintenanceState.OFF.name());
+     hr2 = new HostRequest(host2, (clusters.getCluster(cluster1)).getClusterId(), requestProperties);
      hr2.setMaintenanceState(MaintenanceState.OFF.name());
      set = new HashSet<>();
      set.add(hr1);
***************
*** 9586,9639 ****
      Service service1 = cluster.getService(service1Name);
  
      MaintenanceStateHelper
-         maintenanceStateHelper =
-         MaintenanceStateHelperTest.getMaintenanceStateHelperInstance(clusters);
  
      // test updating a service
-     ServiceRequest sr = new ServiceRequest(cluster1, service1Name, null);
      sr.setCredentialStoreEnabled("true");
  
      ServiceResourceProviderTest.updateServices(controller,
-                                                Collections.singleton(sr), requestProperties, false, false,
-                                                maintenanceStateHelper);
      Assert.assertTrue(service1.isCredentialStoreEnabled());
      Assert.assertTrue(service1.isCredentialStoreSupported());
      Assert.assertFalse(service1.isCredentialStoreRequired());
  
-     ServiceRequest sr2 = new ServiceRequest(cluster1, service2Name, null);
      sr2.setCredentialStoreEnabled("true");
      try {
        ServiceResourceProviderTest.updateServices(controller,
-                                                  Collections.singleton(sr2), requestProperties, false, false,
-                                                  maintenanceStateHelper);
        Assert.assertTrue("Expected exception not thrown - service does not support cred store", true);
      }catch(IllegalArgumentException iaex) {
        Assert.assertTrue(iaex.getMessage(), iaex.getMessage().contains(
-           "Invalid arguments, cannot enable credential store as it is not supported by the service. Service=STORM"));
      }
  
-     ServiceRequest sr3 = new ServiceRequest(cluster1, service3Name, null);
      sr3.setCredentialStoreEnabled("false");
      try {
        ServiceResourceProviderTest.updateServices(controller,
-                                                  Collections.singleton(sr3), requestProperties, false, false,
-                                                  maintenanceStateHelper);
        Assert.assertTrue("Expected exception not thrown - service does not support disabling of cred store", true);
      }catch(IllegalArgumentException iaex) {
        Assert.assertTrue(iaex.getMessage(), iaex.getMessage().contains(
-           "Invalid arguments, cannot disable credential store as it is required by the service. Service=ZOOKEEPER"));
      }
  
-     ServiceRequest sr4 = new ServiceRequest(cluster1, service3Name, null);
      sr4.setCredentialStoreSupported("true");
      try {
        ServiceResourceProviderTest.updateServices(controller,
-                                                  Collections.singleton(sr4), requestProperties, false, false,
-                                                  maintenanceStateHelper);
        Assert.assertTrue("Expected exception not thrown - service does not support updating cred store support", true);
      }catch(IllegalArgumentException iaex) {
        Assert.assertTrue(iaex.getMessage(), iaex.getMessage().contains(
-           "Invalid arguments, cannot update credential_store_supported as it is set only via service definition. Service=ZOOKEEPER"));
      }
    }
  
--- 9592,9645 ----
      Service service1 = cluster.getService(service1Name);
  
      MaintenanceStateHelper
+       maintenanceStateHelper =
+       MaintenanceStateHelperTest.getMaintenanceStateHelperInstance(clusters);
  
      // test updating a service
+     ServiceRequest sr = new ServiceRequest((clusters.getCluster(cluster1)).getClusterId(), service1Name, null);
      sr.setCredentialStoreEnabled("true");
  
      ServiceResourceProviderTest.updateServices(controller,
+       Collections.singleton(sr), requestProperties, false, false,
+       maintenanceStateHelper);
      Assert.assertTrue(service1.isCredentialStoreEnabled());
      Assert.assertTrue(service1.isCredentialStoreSupported());
      Assert.assertFalse(service1.isCredentialStoreRequired());
  
+     ServiceRequest sr2 = new ServiceRequest((clusters.getCluster(cluster1)).getClusterId(), service2Name, null);
      sr2.setCredentialStoreEnabled("true");
      try {
        ServiceResourceProviderTest.updateServices(controller,
+         Collections.singleton(sr2), requestProperties, false, false,
+         maintenanceStateHelper);
        Assert.assertTrue("Expected exception not thrown - service does not support cred store", true);
      }catch(IllegalArgumentException iaex) {
        Assert.assertTrue(iaex.getMessage(), iaex.getMessage().contains(
+         "Invalid arguments, cannot enable credential store as it is not supported by the service. Service=STORM"));
      }
  
+     ServiceRequest sr3 = new ServiceRequest((clusters.getCluster(cluster1)).getClusterId(), service3Name, null);
      sr3.setCredentialStoreEnabled("false");
      try {
        ServiceResourceProviderTest.updateServices(controller,
+         Collections.singleton(sr3), requestProperties, false, false,
+         maintenanceStateHelper);
        Assert.assertTrue("Expected exception not thrown - service does not support disabling of cred store", true);
      }catch(IllegalArgumentException iaex) {
        Assert.assertTrue(iaex.getMessage(), iaex.getMessage().contains(
+         "Invalid arguments, cannot disable credential store as it is required by the service. Service=ZOOKEEPER"));
      }
  
+     ServiceRequest sr4 = new ServiceRequest((clusters.getCluster(cluster1)).getClusterId(), service3Name, null);
      sr4.setCredentialStoreSupported("true");
      try {
        ServiceResourceProviderTest.updateServices(controller,
+         Collections.singleton(sr4), requestProperties, false, false,
+         maintenanceStateHelper);
        Assert.assertTrue("Expected exception not thrown - service does not support updating cred store support", true);
      }catch(IllegalArgumentException iaex) {
        Assert.assertTrue(iaex.getMessage(), iaex.getMessage().contains(
+         "Invalid arguments, cannot update credential_store_supported as it is set only via service definition. Service=ZOOKEEPER"));
      }
    }
  
***************
*** 9701,9710 ****
      service2.setMaintenanceState(MaintenanceState.ON);
  
      Set<ServiceRequest> srs = new HashSet<>();
-     srs.add(new ServiceRequest(cluster1, serviceName1, State.INSTALLED.name()));
-     srs.add(new ServiceRequest(cluster1, serviceName2, State.INSTALLED.name()));
      RequestStatusResponse rsr = ServiceResourceProviderTest.updateServices(controller, srs,
-             requestProperties, false, false, maintenanceStateHelper);
  
      for (ShortTaskStatus sts : rsr.getTasks()) {
        String role = sts.getRole();
--- 9707,9716 ----
      service2.setMaintenanceState(MaintenanceState.ON);
  
      Set<ServiceRequest> srs = new HashSet<>();
+     srs.add(new ServiceRequest((clusters.getCluster(cluster1)).getClusterId(), serviceName1, State.INSTALLED.name()));
+     srs.add(new ServiceRequest((clusters.getCluster(cluster1)).getClusterId(), serviceName2, State.INSTALLED.name()));
      RequestStatusResponse rsr = ServiceResourceProviderTest.updateServices(controller, srs,
+       requestProperties, false, false, maintenanceStateHelper);
  
      for (ShortTaskStatus sts : rsr.getTasks()) {
        String role = sts.getRole();
***************
*** 9735,9745 ****
      h1.setMaintenanceState(cluster.getClusterId(), MaintenanceState.ON);
  
      srs = new HashSet<>();
-     srs.add(new ServiceRequest(cluster1, serviceName1, State.INSTALLED.name()));
-     srs.add(new ServiceRequest(cluster1, serviceName2, State.INSTALLED.name()));
  
      rsr = ServiceResourceProviderTest.updateServices(controller, srs, requestProperties,
-             false, false, maintenanceStateHelper);
  
      for (ShortTaskStatus sts : rsr.getTasks()) {
        Assert.assertFalse(sts.getHostName().equals(host1));
--- 9741,9751 ----
      h1.setMaintenanceState(cluster.getClusterId(), MaintenanceState.ON);
  
      srs = new HashSet<>();
+     srs.add(new ServiceRequest((clusters.getCluster(cluster1)).getClusterId(), serviceName1, State.INSTALLED.name()));
+     srs.add(new ServiceRequest((clusters.getCluster(cluster1)).getClusterId(), serviceName2, State.INSTALLED.name()));
  
      rsr = ServiceResourceProviderTest.updateServices(controller, srs, requestProperties,
+       false, false, maintenanceStateHelper);
  
      for (ShortTaskStatus sts : rsr.getTasks()) {
        Assert.assertFalse(sts.getHostName().equals(host1));
***************
*** 9750,9762 ****
  
      service2.setMaintenanceState(MaintenanceState.ON);
  
-     ServiceRequest sr = new ServiceRequest(cluster1, serviceName2, State.INSTALLED.name());
      rsr = ServiceResourceProviderTest.updateServices(controller,
-         Collections.singleton(sr), requestProperties, false, false, maintenanceStateHelper);
  
      Assert.assertTrue("Service start request defaults to Cluster operation level," +
-                     "command does not create tasks",
-         rsr == null || rsr.getTasks().size() == 0);
  
    }
  
--- 9756,9768 ----
  
      service2.setMaintenanceState(MaintenanceState.ON);
  
+     ServiceRequest sr = new ServiceRequest((clusters.getCluster(cluster1)).getClusterId(), serviceName2, State.INSTALLED.name());
      rsr = ServiceResourceProviderTest.updateServices(controller,
+       Collections.singleton(sr), requestProperties, false, false, maintenanceStateHelper);
  
      Assert.assertTrue("Service start request defaults to Cluster operation level," +
+         "command does not create tasks",
+       rsr == null || rsr.getTasks().size() == 0);
  
    }
  
