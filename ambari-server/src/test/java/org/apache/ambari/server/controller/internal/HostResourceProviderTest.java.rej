***************
*** 161,167 ****
      Map<String, Object> properties = new LinkedHashMap<>();
  
      // add properties to the request map
-     properties.put(HostResourceProvider.HOST_CLUSTER_NAME_PROPERTY_ID, "Cluster100");
      properties.put(HostResourceProvider.HOST_NAME_PROPERTY_ID, "Host100");
  
      propertySet.add(properties);
--- 161,167 ----
      Map<String, Object> properties = new LinkedHashMap<>();
  
      // add properties to the request map
+     properties.put(HostResourceProvider.HOST_CLUSTER_ID_PROPERTY_ID, "Cluster100");
      properties.put(HostResourceProvider.HOST_NAME_PROPERTY_ID, "Host100");
  
      propertySet.add(properties);
***************
*** 243,249 ****
  
      Set<String> propertyIds = new HashSet<>();
  
-     propertyIds.add(HostResourceProvider.HOST_CLUSTER_NAME_PROPERTY_ID);
      propertyIds.add(HostResourceProvider.HOST_NAME_PROPERTY_ID);
      propertyIds.add(HostResourceProvider.HOST_MAINTENANCE_STATE_PROPERTY_ID);
  
--- 243,249 ----
  
      Set<String> propertyIds = new HashSet<>();
  
+     propertyIds.add(HostResourceProvider.HOST_CLUSTER_ID_PROPERTY_ID);
      propertyIds.add(HostResourceProvider.HOST_NAME_PROPERTY_ID);
      propertyIds.add(HostResourceProvider.HOST_MAINTENANCE_STATE_PROPERTY_ID);
  
***************
*** 300,310 ****
      Set<Cluster> clusterSet = new HashSet<>();
      clusterSet.add(cluster);
  
-     ServiceComponentHostResponse shr1 = new ServiceComponentHostResponse("Cluster100", "Service100", "Component100", "Component 100",
          "Host100", "Host100", "STARTED", "", null, null, null);
-     ServiceComponentHostResponse shr2 = new ServiceComponentHostResponse("Cluster100", "Service100", "Component102", "Component 102",
          "Host100", "Host100", "STARTED", "", null, null, null);
-     ServiceComponentHostResponse shr3 = new ServiceComponentHostResponse("Cluster100", "Service100", "Component103", "Component 103",
          "Host100", "Host100", "STARTED", "", null, null, null);
  
      Set<ServiceComponentHostResponse> responses = new HashSet<>();
--- 300,310 ----
      Set<Cluster> clusterSet = new HashSet<>();
      clusterSet.add(cluster);
  
+     ServiceComponentHostResponse shr1 = new ServiceComponentHostResponse(100L, "Service100", "Component100", "Component 100",
          "Host100", "Host100", "STARTED", "", null, null, null);
+     ServiceComponentHostResponse shr2 = new ServiceComponentHostResponse(100L, "Service100", "Component102", "Component 102",
          "Host100", "Host100", "STARTED", "", null, null, null);
+     ServiceComponentHostResponse shr3 = new ServiceComponentHostResponse(100L, "Service100", "Component103", "Component 103",
          "Host100", "Host100", "STARTED", "", null, null, null);
  
      Set<ServiceComponentHostResponse> responses = new HashSet<>();
***************
*** 347,353 ****
  
      Set<String> propertyIds = new HashSet<>();
  
-     propertyIds.add(HostResourceProvider.HOST_CLUSTER_NAME_PROPERTY_ID);
      propertyIds.add(HostResourceProvider.HOST_NAME_PROPERTY_ID);
      propertyIds.add(HostResourceProvider.HOST_HOST_STATUS_PROPERTY_ID);
  
--- 347,353 ----
  
      Set<String> propertyIds = new HashSet<>();
  
+     propertyIds.add(HostResourceProvider.HOST_CLUSTER_ID_PROPERTY_ID);
      propertyIds.add(HostResourceProvider.HOST_NAME_PROPERTY_ID);
      propertyIds.add(HostResourceProvider.HOST_HOST_STATUS_PROPERTY_ID);
  
***************
*** 398,408 ****
      Set<Cluster> clusterSet = new HashSet<>();
      clusterSet.add(cluster);
  
-     ServiceComponentHostResponse shr1 = new ServiceComponentHostResponse("Cluster100", "Service100", "Component100", "Component 100",
          "Host100", "Host100", "STARTED", "", null, null, null);
-     ServiceComponentHostResponse shr2 = new ServiceComponentHostResponse("Cluster100", "Service100", "Component102", "Component 102",
          "Host100", "Host100", "STARTED", "", null, null, null);
-     ServiceComponentHostResponse shr3 = new ServiceComponentHostResponse("Cluster100", "Service100", "Component103", "Component 103",
          "Host100", "Host100", "STARTED", "", null, null, null);
  
      Set<ServiceComponentHostResponse> responses = new HashSet<>();
--- 398,408 ----
      Set<Cluster> clusterSet = new HashSet<>();
      clusterSet.add(cluster);
  
+     ServiceComponentHostResponse shr1 = new ServiceComponentHostResponse(100L, "Service100", "Component100", "Component 100",
          "Host100", "Host100", "STARTED", "", null, null, null);
+     ServiceComponentHostResponse shr2 = new ServiceComponentHostResponse(100L, "Service100", "Component102", "Component 102",
          "Host100", "Host100", "STARTED", "", null, null, null);
+     ServiceComponentHostResponse shr3 = new ServiceComponentHostResponse(100L, "Service100", "Component103", "Component 103",
          "Host100", "Host100", "STARTED", "", null, null, null);
  
      Set<ServiceComponentHostResponse> responses = new HashSet<>();
***************
*** 439,445 ****
  
      Set<String> propertyIds = new HashSet<>();
  
-     propertyIds.add(HostResourceProvider.HOST_CLUSTER_NAME_PROPERTY_ID);
      propertyIds.add(HostResourceProvider.HOST_NAME_PROPERTY_ID);
      propertyIds.add(HostResourceProvider.HOST_HOST_STATUS_PROPERTY_ID);
  
--- 439,445 ----
  
      Set<String> propertyIds = new HashSet<>();
  
+     propertyIds.add(HostResourceProvider.HOST_CLUSTER_ID_PROPERTY_ID);
      propertyIds.add(HostResourceProvider.HOST_NAME_PROPERTY_ID);
      propertyIds.add(HostResourceProvider.HOST_HOST_STATUS_PROPERTY_ID);
  
***************
*** 487,504 ****
      ResourceProviderFactory resourceProviderFactory = createNiceMock(ResourceProviderFactory.class);
      ResourceProvider hostResourceProvider = getHostProvider(injector);
  
-     Host host100 = createMockHost("Host100", "Cluster100", null, "UNHEALTHY", "RECOVERABLE", null);
  
      AbstractControllerResourceProvider.init(resourceProviderFactory);
  
      Set<Cluster> clusterSet = new HashSet<>();
      clusterSet.add(cluster);
  
-     ServiceComponentHostResponse shr1 = new ServiceComponentHostResponse("Cluster100", "Service100", "Component100", "Component 100",
          "Host100", "Host100", "STARTED", "", null, null, null);
-     ServiceComponentHostResponse shr2 = new ServiceComponentHostResponse("Cluster100", "Service100", "Component102", "Component 102",
          "Host100", "Host100", "INSTALLED", "", null, null, null);
-     ServiceComponentHostResponse shr3 = new ServiceComponentHostResponse("Cluster100", "Service100", "Component103", "Component 103",
          "Host100", "Host100", "STARTED", "", null, null, null);
  
      Set<ServiceComponentHostResponse> responses = new HashSet<>();
--- 487,504 ----
      ResourceProviderFactory resourceProviderFactory = createNiceMock(ResourceProviderFactory.class);
      ResourceProvider hostResourceProvider = getHostProvider(injector);
  
+     Host host100 = createMockHost("Host100", 100L, null, "UNHEALTHY", "RECOVERABLE", null);
  
      AbstractControllerResourceProvider.init(resourceProviderFactory);
  
      Set<Cluster> clusterSet = new HashSet<>();
      clusterSet.add(cluster);
  
+     ServiceComponentHostResponse shr1 = new ServiceComponentHostResponse(100L, "Service100", "Component100", "Component 100",
          "Host100", "Host100", "STARTED", "", null, null, null);
+     ServiceComponentHostResponse shr2 = new ServiceComponentHostResponse(100L, "Service100", "Component102", "Component 102",
          "Host100", "Host100", "INSTALLED", "", null, null, null);
+     ServiceComponentHostResponse shr3 = new ServiceComponentHostResponse(100L, "Service100", "Component103", "Component 103",
          "Host100", "Host100", "STARTED", "", null, null, null);
  
      Set<ServiceComponentHostResponse> responses = new HashSet<>();
***************
*** 539,545 ****
  
      Set<String> propertyIds = new HashSet<>();
  
-     propertyIds.add(HostResourceProvider.HOST_CLUSTER_NAME_PROPERTY_ID);
      propertyIds.add(HostResourceProvider.HOST_NAME_PROPERTY_ID);
      propertyIds.add(HostResourceProvider.HOST_HOST_STATUS_PROPERTY_ID);
  
--- 539,545 ----
  
      Set<String> propertyIds = new HashSet<>();
  
+     propertyIds.add(HostResourceProvider.HOST_CLUSTER_ID_PROPERTY_ID);
      propertyIds.add(HostResourceProvider.HOST_NAME_PROPERTY_ID);
      propertyIds.add(HostResourceProvider.HOST_HOST_STATUS_PROPERTY_ID);
  
***************
*** 613,619 ****
  
      Set<String> propertyIds = new HashSet<>();
  
-     propertyIds.add(HostResourceProvider.HOST_CLUSTER_NAME_PROPERTY_ID);
      propertyIds.add(HostResourceProvider.HOST_NAME_PROPERTY_ID);
      propertyIds.add(HostResourceProvider.HOST_HOST_STATUS_PROPERTY_ID);
  
--- 613,619 ----
  
      Set<String> propertyIds = new HashSet<>();
  
+     propertyIds.add(HostResourceProvider.HOST_CLUSTER_ID_PROPERTY_ID);
      propertyIds.add(HostResourceProvider.HOST_NAME_PROPERTY_ID);
      propertyIds.add(HostResourceProvider.HOST_HOST_STATUS_PROPERTY_ID);
  
***************
*** 679,692 ****
      compRecReports.add(compRecReport);
      rr.setComponentReports(compRecReports);
  
-     Host host100 = createMockHost("Host100", "Cluster100", null, "HEALTHY", "RECOVERABLE", rr);
  
      AbstractControllerResourceProvider.init(resourceProviderFactory);
  
      Set<Cluster> clusterSet = new HashSet<>();
      clusterSet.add(cluster);
  
-     ServiceComponentHostResponse shr1 = new ServiceComponentHostResponse("Cluster100", "Service100", "Component100", "Component 100",
          "Host100", "Host100", "STARTED", "", null, null, null);
  
      Set<ServiceComponentHostResponse> responses = new HashSet<>();
--- 679,692 ----
      compRecReports.add(compRecReport);
      rr.setComponentReports(compRecReports);
  
+     Host host100 = createMockHost("Host100", 100L, null, "HEALTHY", "RECOVERABLE", rr);
  
      AbstractControllerResourceProvider.init(resourceProviderFactory);
  
      Set<Cluster> clusterSet = new HashSet<>();
      clusterSet.add(cluster);
  
+     ServiceComponentHostResponse shr1 = new ServiceComponentHostResponse(100L, "Service100", "Component100", "Component 100",
          "Host100", "Host100", "STARTED", "", null, null, null);
  
      Set<ServiceComponentHostResponse> responses = new HashSet<>();
***************
*** 715,721 ****
  
      Set<String> propertyIds = new HashSet<>();
  
-     propertyIds.add(HostResourceProvider.HOST_CLUSTER_NAME_PROPERTY_ID);
      propertyIds.add(HostResourceProvider.HOST_NAME_PROPERTY_ID);
      propertyIds.add(HostResourceProvider.HOST_RECOVERY_REPORT_PROPERTY_ID);
      propertyIds.add(HostResourceProvider.HOST_RECOVERY_SUMMARY_PROPERTY_ID);
--- 715,721 ----
  
      Set<String> propertyIds = new HashSet<>();
  
+     propertyIds.add(HostResourceProvider.HOST_CLUSTER_ID_PROPERTY_ID);
      propertyIds.add(HostResourceProvider.HOST_NAME_PROPERTY_ID);
      propertyIds.add(HostResourceProvider.HOST_RECOVERY_REPORT_PROPERTY_ID);
      propertyIds.add(HostResourceProvider.HOST_RECOVERY_SUMMARY_PROPERTY_ID);
***************
*** 767,783 ****
      ResourceProviderFactory resourceProviderFactory = createNiceMock(ResourceProviderFactory.class);
      ResourceProvider hostResourceProvider = getHostProvider(injector);
  
-     Host host100 = createMockHost("Host100", "Cluster100", null, "ALERT", "RECOVERABLE", null);
  
      AbstractControllerResourceProvider.init(resourceProviderFactory);
      Set<Cluster> clusterSet = new HashSet<>();
      clusterSet.add(cluster);
  
-     ServiceComponentHostResponse shr1 = new ServiceComponentHostResponse("Cluster100", "Service100", "Component100", "Component 100",
          "Host100", "Host100", "STARTED", "", null, null, null);
-     ServiceComponentHostResponse shr2 = new ServiceComponentHostResponse("Cluster100", "Service100", "Component102", "Component 102",
          "Host100", "Host100", "INSTALLED", "", null, null, null);
-     ServiceComponentHostResponse shr3 = new ServiceComponentHostResponse("Cluster100", "Service100", "Component103", "Component 103",
          "Host100", "Host100", "STARTED", "", null, null, null);
  
      Set<ServiceComponentHostResponse> responses = new HashSet<>();
--- 767,783 ----
      ResourceProviderFactory resourceProviderFactory = createNiceMock(ResourceProviderFactory.class);
      ResourceProvider hostResourceProvider = getHostProvider(injector);
  
+     Host host100 = createMockHost("Host100", 100L, null, "ALERT", "RECOVERABLE", null);
  
      AbstractControllerResourceProvider.init(resourceProviderFactory);
      Set<Cluster> clusterSet = new HashSet<>();
      clusterSet.add(cluster);
  
+     ServiceComponentHostResponse shr1 = new ServiceComponentHostResponse(100L, "Service100", "Component100", "Component 100",
          "Host100", "Host100", "STARTED", "", null, null, null);
+     ServiceComponentHostResponse shr2 = new ServiceComponentHostResponse(100L, "Service100", "Component102", "Component 102",
          "Host100", "Host100", "INSTALLED", "", null, null, null);
+     ServiceComponentHostResponse shr3 = new ServiceComponentHostResponse(100L, "Service100", "Component103", "Component 103",
          "Host100", "Host100", "STARTED", "", null, null, null);
  
      Set<ServiceComponentHostResponse> responses = new HashSet<>();
***************
*** 813,819 ****
  
      Set<String> propertyIds = new HashSet<>();
  
-     propertyIds.add(HostResourceProvider.HOST_CLUSTER_NAME_PROPERTY_ID);
      propertyIds.add(HostResourceProvider.HOST_NAME_PROPERTY_ID);
      propertyIds.add(HostResourceProvider.HOST_HOST_STATUS_PROPERTY_ID);
  
--- 813,819 ----
  
      Set<String> propertyIds = new HashSet<>();
  
+     propertyIds.add(HostResourceProvider.HOST_CLUSTER_ID_PROPERTY_ID);
      propertyIds.add(HostResourceProvider.HOST_NAME_PROPERTY_ID);
      propertyIds.add(HostResourceProvider.HOST_HOST_STATUS_PROPERTY_ID);
  
***************
*** 892,905 ****
      expect(clusters.getHosts()).andReturn(Arrays.asList(host100)).anyTimes();
      expect(clusters.getHostsForCluster("Cluster100")).andReturn(Collections.singletonMap("Host100", host100)).anyTimes();
      expect(clusters.getHost("Host100")).andReturn(host100).anyTimes();
-     clusters.mapAndPublishHostsToCluster(Collections.singleton("Host100"), "Cluster100");
      expectLastCall().anyTimes();
      cluster.recalculateAllClusterVersionStates();
      expectLastCall().anyTimes();
      expect(cluster.getClusterId()).andReturn(2L).anyTimes();
      expect(cluster.getResourceId()).andReturn(4L).anyTimes();
      expect(cluster.getDesiredConfigs()).andReturn(new HashMap<String, DesiredConfig>()).anyTimes();
-     expect(hostResponse1.getClusterName()).andReturn("Cluster100").anyTimes();
      expect(hostResponse1.getHostname()).andReturn("Host100").anyTimes();
      expect(hostResponse1.getHealthStatus()).andReturn(healthStatus).anyTimes();
      expect(healthStatus.getHealthStatus()).andReturn(HostHealthStatus.HealthStatus.HEALTHY).anyTimes();
--- 892,905 ----
      expect(clusters.getHosts()).andReturn(Arrays.asList(host100)).anyTimes();
      expect(clusters.getHostsForCluster("Cluster100")).andReturn(Collections.singletonMap("Host100", host100)).anyTimes();
      expect(clusters.getHost("Host100")).andReturn(host100).anyTimes();
+     clusters.mapAndPublishHostsToCluster(Collections.singleton("Host100"), 100L);
      expectLastCall().anyTimes();
      cluster.recalculateAllClusterVersionStates();
      expectLastCall().anyTimes();
      expect(cluster.getClusterId()).andReturn(2L).anyTimes();
      expect(cluster.getResourceId()).andReturn(4L).anyTimes();
      expect(cluster.getDesiredConfigs()).andReturn(new HashMap<String, DesiredConfig>()).anyTimes();
+     expect(hostResponse1.getClusterId()).andReturn(100L).anyTimes();
      expect(hostResponse1.getHostname()).andReturn("Host100").anyTimes();
      expect(hostResponse1.getHealthStatus()).andReturn(healthStatus).anyTimes();
      expect(healthStatus.getHealthStatus()).andReturn(HostHealthStatus.HealthStatus.HEALTHY).anyTimes();
***************
*** 915,921 ****
  
      Map<String, Object> properties = new LinkedHashMap<>();
  
-     properties.put(HostResourceProvider.HOST_CLUSTER_NAME_PROPERTY_ID, "Cluster100");
      properties.put(HostResourceProvider.HOST_NAME_PROPERTY_ID, "Host100");
      properties.put(PropertyHelper.getPropertyId("Hosts.desired_config", "type"), "global");
      properties.put(PropertyHelper.getPropertyId("Hosts.desired_config", "tag"), "version1");
--- 915,921 ----
  
      Map<String, Object> properties = new LinkedHashMap<>();
  
+     properties.put(HostResourceProvider.HOST_CLUSTER_ID_PROPERTY_ID, "Cluster100");
      properties.put(HostResourceProvider.HOST_NAME_PROPERTY_ID, "Host100");
      properties.put(PropertyHelper.getPropertyId("Hosts.desired_config", "type"), "global");
      properties.put(PropertyHelper.getPropertyId("Hosts.desired_config", "tag"), "version1");
***************
*** 972,998 ****
      Set<Cluster> clusterSet = new HashSet<>();
      clusterSet.add(cluster);
  
-     Host host100 = createMockHost("Host100", "Cluster100", null, "HEALTHY", "RECOVERABLE", null);
  
      // set expectations
      expect(managementController.getClusters()).andReturn(clusters).anyTimes();
      expect(managementController.getAmbariMetaInfo()).andReturn(ambariMetaInfo).anyTimes();
      expect(managementController.getHostComponents(EasyMock.<Set<ServiceComponentHostRequest>>anyObject()))
          .andReturn(Collections.<ServiceComponentHostResponse>emptySet()).anyTimes();
-     managementController.registerRackChange("Cluster100");
      expectLastCall().anyTimes();
      expect(clusters.getCluster("Cluster100")).andReturn(cluster).anyTimes();
      expect(clusters.getClustersForHost("Host100")).andReturn(clusterSet).anyTimes();
      expect(clusters.getHost("Host100")).andReturn(host100).anyTimes();
      expect(clusters.getHostsForCluster("Cluster100")).andReturn(Collections.singletonMap("Host100", host100)).anyTimes();
-     clusters.mapAndPublishHostsToCluster(Collections.singleton("Host100"), "Cluster100");
      expectLastCall().anyTimes();
      cluster.recalculateAllClusterVersionStates();
      expectLastCall().anyTimes();
      expect(cluster.getClusterId()).andReturn(2L).anyTimes();
      expect(cluster.getResourceId()).andReturn(4L).anyTimes();
      expect(cluster.getDesiredConfigs()).andReturn(new HashMap<String, DesiredConfig>()).anyTimes();
-     expect(hostResponse1.getClusterName()).andReturn("Cluster100").anyTimes();
      expect(hostResponse1.getHostname()).andReturn("Host100").anyTimes();
      expect(hostResponse1.getHealthStatus()).andReturn(healthStatus).anyTimes();
      expect(healthStatus.getHealthStatus()).andReturn(HostHealthStatus.HealthStatus.HEALTHY).anyTimes();
--- 972,998 ----
      Set<Cluster> clusterSet = new HashSet<>();
      clusterSet.add(cluster);
  
+     Host host100 = createMockHost("Host100", 100L, null, "HEALTHY", "RECOVERABLE", null);
  
      // set expectations
      expect(managementController.getClusters()).andReturn(clusters).anyTimes();
      expect(managementController.getAmbariMetaInfo()).andReturn(ambariMetaInfo).anyTimes();
      expect(managementController.getHostComponents(EasyMock.<Set<ServiceComponentHostRequest>>anyObject()))
          .andReturn(Collections.<ServiceComponentHostResponse>emptySet()).anyTimes();
+     managementController.registerRackChange(100L);
      expectLastCall().anyTimes();
      expect(clusters.getCluster("Cluster100")).andReturn(cluster).anyTimes();
      expect(clusters.getClustersForHost("Host100")).andReturn(clusterSet).anyTimes();
      expect(clusters.getHost("Host100")).andReturn(host100).anyTimes();
      expect(clusters.getHostsForCluster("Cluster100")).andReturn(Collections.singletonMap("Host100", host100)).anyTimes();
+     clusters.mapAndPublishHostsToCluster(Collections.singleton("Host100"), 100L);
      expectLastCall().anyTimes();
      cluster.recalculateAllClusterVersionStates();
      expectLastCall().anyTimes();
      expect(cluster.getClusterId()).andReturn(2L).anyTimes();
      expect(cluster.getResourceId()).andReturn(4L).anyTimes();
      expect(cluster.getDesiredConfigs()).andReturn(new HashMap<String, DesiredConfig>()).anyTimes();
+     expect(hostResponse1.getClusterId()).andReturn(100L).anyTimes();
      expect(hostResponse1.getHostname()).andReturn("Host100").anyTimes();
      expect(hostResponse1.getHealthStatus()).andReturn(healthStatus).anyTimes();
      expect(healthStatus.getHealthStatus()).andReturn(HostHealthStatus.HealthStatus.HEALTHY).anyTimes();
***************
*** 1135,1141 ****
      Map<String, HostConfig> desiredHostConfigs = new HashMap<>();
  
      // requests
-     HostRequest request1 = new HostRequest("host1", "cluster1", Collections.<String, String>emptyMap());
  
      Set<HostRequest> setRequests = new HashSet<>();
      setRequests.add(request1);
--- 1135,1141 ----
      Map<String, HostConfig> desiredHostConfigs = new HashMap<>();
  
      // requests
+     HostRequest request1 = new HostRequest("host1", 1L, Collections.<String, String>emptyMap());
  
      Set<HostRequest> setRequests = new HashSet<>();
      setRequests.add(request1);
***************
*** 1172,1178 ****
      Cluster cluster = createMock(Cluster.class);
  
      // requests
-     HostRequest request1 = new HostRequest("host1", "cluster1", Collections.<String, String>emptyMap());
      Set<HostRequest> setRequests = Collections.singleton(request1);
  
      // expectations
--- 1172,1178 ----
      Cluster cluster = createMock(Cluster.class);
  
      // requests
+     HostRequest request1 = new HostRequest("host1", 1L, Collections.<String, String>emptyMap());
      Set<HostRequest> setRequests = Collections.singleton(request1);
  
      // expectations
***************
*** 1203,1209 ****
      Host host = createNiceMock(Host.class);
  
      // requests
-     HostRequest request1 = new HostRequest("host1", "cluster1", Collections.<String, String>emptyMap());
      Set<HostRequest> setRequests = Collections.singleton(request1);
  
      // expectations
--- 1203,1209 ----
      Host host = createNiceMock(Host.class);
  
      // requests
+     HostRequest request1 = new HostRequest("host1", 1L, Collections.<String, String>emptyMap());
      Set<HostRequest> setRequests = Collections.singleton(request1);
  
      // expectations
***************
*** 1243,1252 ****
      HostResponse response2 = createNiceMock(HostResponse.class);
  
      // requests
-     HostRequest request1 = new HostRequest("host1", "cluster1", Collections.<String, String>emptyMap());
-     HostRequest request2 = new HostRequest("host2", "cluster1", Collections.<String, String>emptyMap());
-     HostRequest request3 = new HostRequest("host3", "cluster1", Collections.<String, String>emptyMap());
-     HostRequest request4 = new HostRequest("host4", "cluster1", Collections.<String, String>emptyMap());
  
      Set<HostRequest> setRequests = new HashSet<>();
      setRequests.add(request1);
--- 1243,1252 ----
      HostResponse response2 = createNiceMock(HostResponse.class);
  
      // requests
+     HostRequest request1 = new HostRequest("host1", 1L, Collections.<String, String>emptyMap());
+     HostRequest request2 = new HostRequest("host2", 1L, Collections.<String, String>emptyMap());
+     HostRequest request3 = new HostRequest("host3", 1L, Collections.<String, String>emptyMap());
+     HostRequest request4 = new HostRequest("host4", 1L, Collections.<String, String>emptyMap());
  
      Set<HostRequest> setRequests = new HashSet<>();
      setRequests.add(request1);
***************
*** 1301,1307 ****
      for (HostRequest request : requests) {
        Map<String, Object> requestProperties = new HashMap<>();
        requestProperties.put(HostResourceProvider.HOST_NAME_PROPERTY_ID, request.getHostname());
-       requestProperties.put(HostResourceProvider.HOST_CLUSTER_NAME_PROPERTY_ID, request.getClusterName());
        properties.add(requestProperties);
      }
      provider.createHosts(PropertyHelper.getCreateRequest(properties, Collections.<String, String>emptyMap()));
--- 1301,1307 ----
      for (HostRequest request : requests) {
        Map<String, Object> requestProperties = new HashMap<>();
        requestProperties.put(HostResourceProvider.HOST_NAME_PROPERTY_ID, request.getHostname());
+       requestProperties.put(HostResourceProvider.HOST_CLUSTER_ID_PROPERTY_ID, request.getClusterId());
        properties.add(requestProperties);
      }
      provider.createHosts(PropertyHelper.getCreateRequest(properties, Collections.<String, String>emptyMap()));
***************
*** 1384,1394 ****
      return provider;
    }
  
-   private Host createMockHost(String hostName, String clusterName, Map<String, HostConfig> desiredConfigs,
                                String status, String recoverySummary, RecoveryReport recoveryReport) {
      Host host = createMock(Host.class);
      HostHealthStatus hostHealthStatus = new HostHealthStatus(HealthStatus.HEALTHY, "");
-     HostResponse hostResponse = new HostResponse(hostName, clusterName, null, null, 1, 1, null,
          "centos6", null, 1024, 1024, null, 1, 1, null, null, null, hostHealthStatus, "HEALTHY", status);
  
      hostResponse.setRecoverySummary(recoverySummary);
--- 1384,1394 ----
      return provider;
    }
  
+   private Host createMockHost(String hostName, Long clusterId, Map<String, HostConfig> desiredConfigs,
                                String status, String recoverySummary, RecoveryReport recoveryReport) {
      Host host = createMock(Host.class);
      HostHealthStatus hostHealthStatus = new HostHealthStatus(HealthStatus.HEALTHY, "");
+     HostResponse hostResponse = new HostResponse(hostName, clusterId, null, null, 1, 1, null,
          "centos6", null, 1024, 1024, null, 1, 1, null, null, null, hostHealthStatus, "HEALTHY", status);
  
      hostResponse.setRecoverySummary(recoverySummary);
***************
*** 1412,1423 ****
    private Predicate buildPredicate(String clusterName, String hostName) {
      PredicateBuilder builder = new PredicateBuilder();
      if (clusterName != null && hostName != null) {
-       return builder.property(HostResourceProvider.HOST_CLUSTER_NAME_PROPERTY_ID).equals(clusterName)
        .and().property(HostResourceProvider.HOST_NAME_PROPERTY_ID).equals(hostName).toPredicate();
      }
  
      return clusterName != null ?
-             builder.property(HostResourceProvider.HOST_CLUSTER_NAME_PROPERTY_ID).equals(clusterName).toPredicate() :
              builder.property(HostResourceProvider.HOST_NAME_PROPERTY_ID).equals(hostName).toPredicate();
    }
  }
--- 1412,1423 ----
    private Predicate buildPredicate(String clusterName, String hostName) {
      PredicateBuilder builder = new PredicateBuilder();
      if (clusterName != null && hostName != null) {
+       return builder.property(HostResourceProvider.HOST_CLUSTER_ID_PROPERTY_ID).equals(clusterName)
        .and().property(HostResourceProvider.HOST_NAME_PROPERTY_ID).equals(hostName).toPredicate();
      }
  
      return clusterName != null ?
+             builder.property(HostResourceProvider.HOST_CLUSTER_ID_PROPERTY_ID).equals(clusterName).toPredicate() :
              builder.property(HostResourceProvider.HOST_NAME_PROPERTY_ID).equals(hostName).toPredicate();
    }
  }
